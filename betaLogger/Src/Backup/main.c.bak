/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "i2c.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "usb.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include "ff.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
FATFS SDFatFs;  /* File system object for SD card logical drive */
FIL MyFile;     /* File object */
char SDPath[4]; /* SD card logical drive path */
uint32_t byteswritten;                     /* File write/read counts */
FRESULT res;

char textTxBuffer[500];
char mpuBuffer[42];
char timeBuffer[12];

uint8_t gpsReady;
uint8_t rawGps[69];
uint8_t sdBufferA[20][84];
uint8_t sdBufferB[20][84];
uint8_t sdBufferC[20][84];

uint16_t rawAdc[350];
uint8_t rawMpu[14];
uint8_t adcReady, mpuReady, timReady, nBuffer;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    /* USER CODE BEGIN 1 */
    char fileName[13];
    char fileHeader[135];
    uint16_t fileNumber = 0;

    uint8_t mpuConfigTx, mpuConfigRx;

    /* USER CODE END 1 */


    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();

    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();

    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    MX_DMA_Init();
    MX_TIM3_Init();
    MX_USART1_UART_Init();
    MX_SPI1_Init();
    MX_USART3_UART_Init();
    MX_ADC1_Init();
    MX_I2C1_Init();
    MX_USB_PCD_Init();
    /* USER CODE BEGIN 2 */
    sprintf(textTxBuffer, "betaLogger USART1 test\r");
    HAL_UART_Transmit(&huart1, (uint8_t *)textTxBuffer, strlen(textTxBuffer), 500);

    f_mount(&SDFatFs, (TCHAR const *)SDPath, 0);
    while (res == FR_OK) {
        sprintf(fileName, "file%04d.dlf", ++fileNumber);
        res = f_open(&MyFile, fileName, FA_OPEN_EXISTING | FA_READ);
    }
    f_open(&MyFile, fileName, FA_OPEN_ALWAYS | FA_WRITE);
    sprintf(fileHeader, "#V2\r#DATASTART\rDatalog Time; GPS Latitude; GPS Longitude; GPS Speed;Ax;Ay;Az;Gx;Gy;Gz;\rseg.; deg; deg; knots;un.;un.;un.;un.;un.;un.;\r");
    fileHeader[134] = 0x0A;
    f_write(&MyFile, fileHeader, sizeof(fileHeader), (void *)&byteswritten);
    f_sync(&MyFile);


    for(int i = 0; i < 20; i++) {
        for(int j = 0; j < 82; j++) {
            sdBufferA[i][j] = 0x30;
        }
        sdBufferA[i][10] = 0x41;
        sdBufferA[i][22] = 0x41;
        sdBufferA[i][34] = 0x41;
        sdBufferA[i][40] = 0x41;
        sdBufferA[i][47] = 0x41;
        sdBufferA[i][54] = 0x41;
        sdBufferA[i][61] = 0x41;
        sdBufferA[i][68] = 0x41;
        sdBufferA[i][75] = 0x41;
        sdBufferA[i][82] = 0x0D;
        sdBufferA[i][83] = 0x0A;
    }

    for(int i = 0; i < 20; i++) {
        for(int j = 0; j < 84; j++) {
            sdBufferB[i][j] = sdBufferA[i][j];
            sdBufferC[i][j] = sdBufferA[i][j];
        }
    }


    HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x75, I2C_MEMADD_SIZE_8BIT, &mpuConfigRx, 1, 100);
    // sprintf(txBuffer, "Slave Address: %x \r", mpuConfigRx);
    // HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), 500);

    HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x1A, I2C_MEMADD_SIZE_8BIT, &mpuConfigRx, 1, 100);
    // sprintf(txBuffer, "FIFO config: %x \r", mpuConfigRx);
    // HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), 500);

    mpuConfigTx = 0b00001000;
    HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x1B, I2C_MEMADD_SIZE_8BIT, &mpuConfigTx, 1, 100);
    HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x1B, I2C_MEMADD_SIZE_8BIT, &mpuConfigRx, 1, 100);
    // sprintf(txBuffer, "Gyr cfig: %x \r", mpuConfigRx);
    // HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), 500);

    mpuConfigTx = 0b00011000;
    HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x1C, I2C_MEMADD_SIZE_8BIT, &mpuConfigTx, 1, 100);
    HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x1C, I2C_MEMADD_SIZE_8BIT, &mpuConfigRx, 1, 100);
    // sprintf(txBuffer, "Acc cfig: %x \r", mpuConfigRx);
    // HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), 500);

    HAL_TIM_Base_Start_IT(&htim3);
    // HAL_ADCEx_Calibration_Start(&hadc1);
    // HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawAdc, 350);
    HAL_UART_Receive_DMA(&huart3, (uint8_t *)&rawGps, 51);

    adcReady = 0;
    mpuReady = 0;
    gpsReady = 0;
    timReady = 0;
    nBuffer = 1;
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (gpsReady == 0) {
            // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
            if (rawGps[1] == 0x47 && rawGps[17] == 0x41) {
                // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
                if(nBuffer == 1) {
                    sdBufferA[0][11] = 0x2D;				//-
                    for(int j = 12; j < 22; j++) { 			//latitude
                        sdBufferA[0][j] = rawGps[j+7];
                    }
                    sdBufferA[0][23] = 0x2D;				//-
                    for(int j = 24; j < 34; j++) { 			//longitude
                        sdBufferA[0][j] = rawGps[j+9];
                    }
                    for(int j = 35; j < 40; j++) { 			//speed
                        sdBufferA[0][j] = rawGps[j+11];
                    }

                    for(int i = 1; i < 20; i++) {
                        for(int j = 11; j < 41; j++) {
                            sdBufferA[i][j] = sdBufferA[0][j];
                        }
                    }

                    for(int i = 0; i < 20; i++) {
                        for(int j = 11; j < 41; j++) {
                            sdBufferB[i][j] = sdBufferA[i][j];
                            sdBufferC[i][j] = sdBufferA[i][j];
                        }
                    }
                }
                else if(nBuffer == 2) {
                    sdBufferB[0][11] = 0x2D;				//-
                    for(int j = 12; j < 22; j++) { 			//latitude
                        sdBufferB[0][j] = rawGps[j+7];
                    }
                    sdBufferB[0][23] = 0x2D;				//-
                    for(int j = 24; j < 34; j++) { 			//longitude
                        sdBufferB[0][j] = rawGps[j+9];
                    }
                    for(int j = 35; j < 40; j++) { 			//speed
                        sdBufferB[0][j] = rawGps[j+11];
                    }

                    for(int i = 1; i < 20; i++) {
                        for(int j = 11; j < 41; j++) {
                            sdBufferB[i][j] = sdBufferB[0][j];
                        }
                    }

                    for(int i = 0; i < 20; i++) {
                        for(int j = 11; j < 41; j++) {
                            sdBufferA[i][j] = sdBufferB[i][j];
                            sdBufferC[i][j] = sdBufferB[i][j];
                        }
                    }
                }
                else if(nBuffer == 3) {
                    sdBufferC[0][11] = 0x2D;				//-
                    for(int j = 12; j < 22; j++) { 			//latitude
                        sdBufferC[0][j] = rawGps[j+7];
                    }
                    sdBufferC[0][23] = 0x2D;				//-
                    for(int j = 24; j < 34; j++) { 			//longitude
                        sdBufferC[0][j] = rawGps[j+9];
                    }
                    for(int j = 35; j < 40; j++) { 			//speed
                        sdBufferC[0][j] = rawGps[j+11];
                    }

                    for(int i = 1; i < 20; i++) {
                        for(int j = 11; j < 41; j++) {
                            sdBufferC[i][j] = sdBufferC[0][j];
                        }
                    }

                    for(int i = 0; i < 20; i++) {
                        for(int j = 11; j < 41; j++) {
                            sdBufferA[i][j] = sdBufferC[i][j];
                            sdBufferB[i][j] = sdBufferC[i][j];
                        }
                    }
                }
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
                // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
            } else {
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
            }
            gpsReady = 1;
            HAL_Delay(5);
            HAL_UART_Receive_DMA(&huart3, (uint8_t *)&rawGps, 51);
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
        }

        if (mpuReady == 1 && timReady == 1) {
            // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
            if(nBuffer == 1) {
                // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
                nBuffer = 2;
                adcReady = 0;
                mpuReady = 0;
                gpsReady = 0;
                timReady = 0;
                f_write(&MyFile, sdBufferA, sizeof(sdBufferA), (void *)&byteswritten);
                f_sync(&MyFile);
                // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
            }
            else if(nBuffer == 2) {
                // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
                nBuffer = 3;
                adcReady = 0;
                mpuReady = 0;
                gpsReady = 0;
                timReady = 0;
                f_write(&MyFile, sdBufferB, sizeof(sdBufferB), (void *)&byteswritten);
                f_sync(&MyFile);
                // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
            }
            else if(nBuffer == 3) {
                // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
                nBuffer = 1;
                adcReady = 0;
                mpuReady = 0;
                gpsReady = 0;
                timReady = 0;
                f_write(&MyFile, sdBufferC, sizeof(sdBufferC), (void *)&byteswritten);
                f_sync(&MyFile);
                // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
            }
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
            // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
        }

        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
    }
    /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }
    /** Initializes the CPU, AHB and APB busses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    {
        Error_Handler();
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
    {
        Error_Handler();
    }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
    HAL_I2C_Mem_Read_IT(&hi2c1, 0xD0, 0x3B, I2C_MEMADD_SIZE_8BIT, rawMpu, 14);

    static uint32_t seconds, millis;

    millis = millis + 5;
    // timeAux++;
    // if(timeAux == 2950) {
    //     millis = millis-2;
    //     timeAux =0;
    // }
    if(millis == 1000) {
        millis =0;
        seconds++;
    }

    sprintf(timeBuffer,"%06d.%03dA", seconds, millis);

    static uint8_t iTim = 0;

    if(timReady ==0) {
        if(nBuffer ==1) {
            for (int i = 0; i < 11; i++) {
                sdBufferA[iTim][i] = timeBuffer[i];
            }
        } else if(nBuffer ==2) {
            for (int i = 0; i < 11; i++) {
                sdBufferB[iTim][i] = timeBuffer[i];
            }
        }
        else if(nBuffer ==3) {
            for (int i = 0; i < 11; i++) {
                sdBufferC[iTim][i] = timeBuffer[i];
            }
        }

        iTim++;
        if (iTim == 20) {
            timReady = 1;
            iTim = 0;
        }
    }
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);

    uint32_t xAcc = (rawMpu[0] << 8) | (0x00F0 & rawMpu[1]);
    uint32_t yAcc = (rawMpu[2] << 8) | (0x00F0 & rawMpu[3]);
    uint32_t zAcc = (rawMpu[4] << 8) | (0x00F0 & rawMpu[5]);
    uint32_t xGyr = (rawMpu[8] << 8) | (0x00FF & rawMpu[9]);
    uint32_t yGyr = (rawMpu[10] << 8) | (0x00FF & rawMpu[11]);
    uint32_t zGyr = (rawMpu[12] << 8) | (0x00FF & rawMpu[13]);

    static uint8_t iMpu = 0;

    if(mpuReady == 0) {
        sprintf(mpuBuffer, "%06hdA%06hdA%06hdA%06hdA%06hdA%06hd", xAcc, yAcc, zAcc, xGyr, yGyr, zGyr);

        if(nBuffer == 1) {
            for (int i = 0; i < 41; i++) {
                sdBufferA[iMpu][i+41] = mpuBuffer[i];
            }
        } else if(nBuffer == 2) {
            for (int i = 0; i < 41; i++) {
                sdBufferB[iMpu][i+41] = mpuBuffer[i];
            }
        }
        else if(nBuffer == 3) {
            for (int i = 0; i < 41; i++) {
                sdBufferC[iMpu][i+41] = mpuBuffer[i];
            }
        }

        iMpu++;
        if (iMpu == 20) {
            mpuReady = 1;
            iMpu = 0;
        }
    }

    // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
    // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
}

// void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
// {
//     for (iAdc = 0; iAdc < 50; iAdc++) {
//         for (j = 0; j < 7; j++) {
//             buffer[iAdc][j] = rawAdc[7 * iAdc + j];
//         }
//         j = 0;
//     }
//     iAdc = 0;
//     adcReady = 1;
// }
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
       tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
