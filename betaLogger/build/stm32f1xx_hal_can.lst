ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_hal_can.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  16              		.align	1
  17              		.weak	HAL_CAN_MspInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_CAN_MspInit:
  24              	.LFB68:
  25              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @file    stm32f1xx_hal_can.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Configuration functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Control functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Interrupts management
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Callbacks functions
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   @verbatim
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                         ##### How to use this driver #####
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_MspInit():
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) Configure CAN pins
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 2


  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           functions:
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           messages.
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           can be used:
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  message.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  message.
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  mailboxes.
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  in a Tx mailbox.
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           stored in the Rx Fifo.
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Polling mode operation ***
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ==============================
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Reception:
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  until at least one message is received.
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Transmission:
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Then request transmission of a message using
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Interrupt mode operation ***
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ================================
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 3


  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           here.
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  read, the notification can be activated again.
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *** Sleep mode ***
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       ==================
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           be completed.
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           will be entered.
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   @endverbatim
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @attention
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * Redistribution and use in source and binary forms, with or without modification,
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * are permitted provided that the following conditions are met:
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *      this list of conditions and the following disclaimer.
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *      this list of conditions and the following disclaimer in the documentation
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *      and/or other materials provided with the distribution.
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *      may be used to endorse or promote products derived from this software
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *      without specific prior written permission.
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 4


 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ******************************************************************************
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #include "stm32f1xx_hal.h"
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @addtogroup STM32F1xx_HAL_Driver
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if defined(CAN1)
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN CAN
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief CAN driver modules
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 5


 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan == NULL)
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Exit from sleep mode */
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Get tick */
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   tickstart = HAL_GetTick();
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 6


 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Change CAN state */
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Request initialisation */
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Get tick */
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   tickstart = HAL_GetTick();
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Wait initialisation acknowledge */
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Change CAN state */
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the time triggered communication mode */
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic bus-off management */
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic wake-up mode */
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 7


 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the automatic retransmission */
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the transmit FIFO priority */
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Set the bit timing register */
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Initialize the error code */
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Initialize the CAN state */
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return HAL_OK;
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         reset values.
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 8


 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan == NULL)
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Stop the CAN module */
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   (void)HAL_CAN_Stop(hcan);
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Reset the CAN peripheral */
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Change CAN state */
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return HAL_OK;
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
  26              		.loc 1 415 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
  32              		.loc 1 422 0
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE68:
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 9


  37              		.section	.text.HAL_CAN_Init,"ax",%progbits
  38              		.align	1
  39              		.global	HAL_CAN_Init
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	HAL_CAN_Init:
  46              	.LFB66:
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
  47              		.loc 1 223 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              	.LVL1:
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  52              		.loc 1 227 0
  53 0000 0028     		cmp	r0, #0
  54 0002 00F0A180 		beq	.L21
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
  55              		.loc 1 223 0
  56 0006 38B5     		push	{r3, r4, r5, lr}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 16
  59              		.cfi_offset 3, -16
  60              		.cfi_offset 4, -12
  61              		.cfi_offset 5, -8
  62              		.cfi_offset 14, -4
  63 0008 0446     		mov	r4, r0
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  64              		.loc 1 246 0
  65 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
  66 000e D3B1     		cbz	r3, .L26
  67              	.LVL2:
  68              	.L4:
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  69              		.loc 1 253 0
  70 0010 2268     		ldr	r2, [r4]
  71 0012 1368     		ldr	r3, [r2]
  72 0014 23F00203 		bic	r3, r3, #2
  73 0018 1360     		str	r3, [r2]
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  74              		.loc 1 256 0
  75 001a FFF7FEFF 		bl	HAL_GetTick
  76              	.LVL3:
  77 001e 0546     		mov	r5, r0
  78              	.LVL4:
  79              	.L5:
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
  80              		.loc 1 259 0
  81 0020 2368     		ldr	r3, [r4]
  82 0022 5A68     		ldr	r2, [r3, #4]
  83 0024 12F0020F 		tst	r2, #2
  84 0028 10D0     		beq	.L27
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
  85              		.loc 1 261 0
  86 002a FFF7FEFF 		bl	HAL_GetTick
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 10


  87              	.LVL5:
  88 002e 401B     		subs	r0, r0, r5
  89 0030 0A28     		cmp	r0, #10
  90 0032 F5D9     		bls	.L5
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  91              		.loc 1 264 0
  92 0034 636A     		ldr	r3, [r4, #36]
  93 0036 43F40033 		orr	r3, r3, #131072
  94 003a 6362     		str	r3, [r4, #36]
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
  95              		.loc 1 267 0
  96 003c 0523     		movs	r3, #5
  97 003e 84F82030 		strb	r3, [r4, #32]
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
  98              		.loc 1 269 0
  99 0042 0120     		movs	r0, #1
 100              	.L3:
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 101              		.loc 1 369 0
 102 0044 38BD     		pop	{r3, r4, r5, pc}
 103              	.LVL6:
 104              	.L26:
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 105              		.loc 1 249 0
 106 0046 FFF7FEFF 		bl	HAL_CAN_MspInit
 107              	.LVL7:
 108 004a E1E7     		b	.L4
 109              	.LVL8:
 110              	.L27:
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 111              		.loc 1 274 0
 112 004c 1A68     		ldr	r2, [r3]
 113 004e 42F00102 		orr	r2, r2, #1
 114 0052 1A60     		str	r2, [r3]
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 115              		.loc 1 277 0
 116 0054 FFF7FEFF 		bl	HAL_GetTick
 117              	.LVL9:
 118 0058 0546     		mov	r5, r0
 119              	.LVL10:
 120              	.L7:
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 121              		.loc 1 280 0
 122 005a 2368     		ldr	r3, [r4]
 123 005c 5A68     		ldr	r2, [r3, #4]
 124 005e 12F0010F 		tst	r2, #1
 125 0062 0DD1     		bne	.L28
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 126              		.loc 1 282 0
 127 0064 FFF7FEFF 		bl	HAL_GetTick
 128              	.LVL11:
 129 0068 401B     		subs	r0, r0, r5
 130 006a 0A28     		cmp	r0, #10
 131 006c F5D9     		bls	.L7
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 132              		.loc 1 285 0
 133 006e 636A     		ldr	r3, [r4, #36]
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 11


 134 0070 43F40033 		orr	r3, r3, #131072
 135 0074 6362     		str	r3, [r4, #36]
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 136              		.loc 1 288 0
 137 0076 0523     		movs	r3, #5
 138 0078 84F82030 		strb	r3, [r4, #32]
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 139              		.loc 1 290 0
 140 007c 0120     		movs	r0, #1
 141 007e E1E7     		b	.L3
 142              	.L28:
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 143              		.loc 1 295 0
 144 0080 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2
 145 0082 012A     		cmp	r2, #1
 146 0084 3DD0     		beq	.L29
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 147              		.loc 1 301 0
 148 0086 1A68     		ldr	r2, [r3]
 149 0088 22F08002 		bic	r2, r2, #128
 150 008c 1A60     		str	r2, [r3]
 151              	.L10:
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 152              		.loc 1 305 0
 153 008e 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 154 0090 012B     		cmp	r3, #1
 155 0092 3BD0     		beq	.L30
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 156              		.loc 1 311 0
 157 0094 2268     		ldr	r2, [r4]
 158 0096 1368     		ldr	r3, [r2]
 159 0098 23F04003 		bic	r3, r3, #64
 160 009c 1360     		str	r3, [r2]
 161              	.L12:
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 162              		.loc 1 315 0
 163 009e A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 164 00a0 012B     		cmp	r3, #1
 165 00a2 39D0     		beq	.L31
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 166              		.loc 1 321 0
 167 00a4 2268     		ldr	r2, [r4]
 168 00a6 1368     		ldr	r3, [r2]
 169 00a8 23F02003 		bic	r3, r3, #32
 170 00ac 1360     		str	r3, [r2]
 171              	.L14:
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 172              		.loc 1 325 0
 173 00ae E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 174 00b0 012B     		cmp	r3, #1
 175 00b2 37D0     		beq	.L32
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 176              		.loc 1 331 0
 177 00b4 2268     		ldr	r2, [r4]
 178 00b6 1368     		ldr	r3, [r2]
 179 00b8 43F01003 		orr	r3, r3, #16
 180 00bc 1360     		str	r3, [r2]
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 12


 181              	.L16:
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 182              		.loc 1 335 0
 183 00be 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 184 00c0 012B     		cmp	r3, #1
 185 00c2 35D0     		beq	.L33
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 186              		.loc 1 341 0
 187 00c4 2268     		ldr	r2, [r4]
 188 00c6 1368     		ldr	r3, [r2]
 189 00c8 23F00803 		bic	r3, r3, #8
 190 00cc 1360     		str	r3, [r2]
 191              	.L18:
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 192              		.loc 1 345 0
 193 00ce 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 194 00d0 012B     		cmp	r3, #1
 195 00d2 33D0     		beq	.L34
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 196              		.loc 1 351 0
 197 00d4 2268     		ldr	r2, [r4]
 198 00d6 1368     		ldr	r3, [r2]
 199 00d8 23F00403 		bic	r3, r3, #4
 200 00dc 1360     		str	r3, [r2]
 201              	.L20:
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 202              		.loc 1 355 0
 203 00de A368     		ldr	r3, [r4, #8]
 204 00e0 E268     		ldr	r2, [r4, #12]
 205 00e2 1343     		orrs	r3, r3, r2
 206 00e4 2269     		ldr	r2, [r4, #16]
 207 00e6 1343     		orrs	r3, r3, r2
 208 00e8 6269     		ldr	r2, [r4, #20]
 209 00ea 1343     		orrs	r3, r3, r2
 210 00ec 6268     		ldr	r2, [r4, #4]
 211 00ee 013A     		subs	r2, r2, #1
 212 00f0 2168     		ldr	r1, [r4]
 213 00f2 1343     		orrs	r3, r3, r2
 214 00f4 CB61     		str	r3, [r1, #28]
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 215              		.loc 1 362 0
 216 00f6 0020     		movs	r0, #0
 217 00f8 6062     		str	r0, [r4, #36]
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 218              		.loc 1 365 0
 219 00fa 0123     		movs	r3, #1
 220 00fc 84F82030 		strb	r3, [r4, #32]
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 221              		.loc 1 368 0
 222 0100 A0E7     		b	.L3
 223              	.L29:
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 224              		.loc 1 297 0
 225 0102 1A68     		ldr	r2, [r3]
 226 0104 42F08002 		orr	r2, r2, #128
 227 0108 1A60     		str	r2, [r3]
 228 010a C0E7     		b	.L10
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 13


 229              	.L30:
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 230              		.loc 1 307 0
 231 010c 2268     		ldr	r2, [r4]
 232 010e 1368     		ldr	r3, [r2]
 233 0110 43F04003 		orr	r3, r3, #64
 234 0114 1360     		str	r3, [r2]
 235 0116 C2E7     		b	.L12
 236              	.L31:
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 237              		.loc 1 317 0
 238 0118 2268     		ldr	r2, [r4]
 239 011a 1368     		ldr	r3, [r2]
 240 011c 43F02003 		orr	r3, r3, #32
 241 0120 1360     		str	r3, [r2]
 242 0122 C4E7     		b	.L14
 243              	.L32:
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 244              		.loc 1 327 0
 245 0124 2268     		ldr	r2, [r4]
 246 0126 1368     		ldr	r3, [r2]
 247 0128 23F01003 		bic	r3, r3, #16
 248 012c 1360     		str	r3, [r2]
 249 012e C6E7     		b	.L16
 250              	.L33:
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 251              		.loc 1 337 0
 252 0130 2268     		ldr	r2, [r4]
 253 0132 1368     		ldr	r3, [r2]
 254 0134 43F00803 		orr	r3, r3, #8
 255 0138 1360     		str	r3, [r2]
 256 013a C8E7     		b	.L18
 257              	.L34:
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 258              		.loc 1 347 0
 259 013c 2268     		ldr	r2, [r4]
 260 013e 1368     		ldr	r3, [r2]
 261 0140 43F00403 		orr	r3, r3, #4
 262 0144 1360     		str	r3, [r2]
 263 0146 CAE7     		b	.L20
 264              	.LVL12:
 265              	.L21:
 266              	.LCFI1:
 267              		.cfi_def_cfa_offset 0
 268              		.cfi_restore 3
 269              		.cfi_restore 4
 270              		.cfi_restore 5
 271              		.cfi_restore 14
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 272              		.loc 1 229 0
 273 0148 0120     		movs	r0, #1
 274              	.LVL13:
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 275              		.loc 1 369 0
 276 014a 7047     		bx	lr
 277              		.cfi_endproc
 278              	.LFE66:
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 14


 280              		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 281              		.align	1
 282              		.weak	HAL_CAN_MspDeInit
 283              		.syntax unified
 284              		.thumb
 285              		.thumb_func
 286              		.fpu softvfp
 288              	HAL_CAN_MspDeInit:
 289              	.LFB69:
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 290              		.loc 1 431 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 295              	.LVL14:
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 296              		.loc 1 438 0
 297 0000 7047     		bx	lr
 298              		.cfi_endproc
 299              	.LFE69:
 301              		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 302              		.align	1
 303              		.global	HAL_CAN_ConfigFilter
 304              		.syntax unified
 305              		.thumb
 306              		.thumb_func
 307              		.fpu softvfp
 309              	HAL_CAN_ConfigFilter:
 310              	.LFB70:
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Configuration functions.
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****               ##### Configuration functions #####
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 15


 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         contains the filter configuration information.
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 311              		.loc 1 469 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              		@ link register save eliminated.
 316              	.LVL15:
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filternbrbitpos;
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 317              		.loc 1 471 0
 318 0000 0368     		ldr	r3, [r0]
 319              	.LVL16:
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 320              		.loc 1 472 0
 321 0002 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 322              	.LVL17:
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 323              		.loc 1 474 0
 324 0006 013A     		subs	r2, r2, #1
 325              	.LVL18:
 326 0008 D2B2     		uxtb	r2, r2
 327 000a 012A     		cmp	r2, #1
 328 000c 05D9     		bls	.L50
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if   defined(CAN2)
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select master instance to access the filter banks */
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     can_ip = CAN1;
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 16


 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #else
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the parameters */
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Initialisation mode for the filter */
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #if   defined(CAN2)
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** #endif
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Convert filter number into bit position */
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Deactivation */
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Scale */
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 16-bit scale for the filter */
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit scale for the filter */
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 17


 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter Mode */
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Identifier list mode for the filter*/
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter FIFO assignment */
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Filter activation */
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 329              		.loc 1 591 0
 330 000e 436A     		ldr	r3, [r0, #36]
 331              	.LVL19:
 332 0010 43F48023 		orr	r3, r3, #262144
 333 0014 4362     		str	r3, [r0, #36]
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 334              		.loc 1 593 0
 335 0016 0120     		movs	r0, #1
 336              	.LVL20:
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 337              		.loc 1 595 0
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 18


 338 0018 7047     		bx	lr
 339              	.LVL21:
 340              	.L50:
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filternbrbitpos;
 341              		.loc 1 469 0
 342 001a 70B4     		push	{r4, r5, r6}
 343              	.LCFI2:
 344              		.cfi_def_cfa_offset 12
 345              		.cfi_offset 4, -12
 346              		.cfi_offset 5, -8
 347              		.cfi_offset 6, -4
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 348              		.loc 1 503 0
 349 001c D3F80022 		ldr	r2, [r3, #512]
 350 0020 42F00102 		orr	r2, r2, #1
 351 0024 C3F80022 		str	r2, [r3, #512]
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 352              		.loc 1 512 0
 353 0028 4A69     		ldr	r2, [r1, #20]
 354 002a 02F01F02 		and	r2, r2, #31
 355 002e 0120     		movs	r0, #1
 356              	.LVL22:
 357 0030 00FA02F2 		lsl	r2, r0, r2
 358              	.LVL23:
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 359              		.loc 1 515 0
 360 0034 D3F81C42 		ldr	r4, [r3, #540]
 361 0038 D043     		mvns	r0, r2
 362 003a 0440     		ands	r4, r4, r0
 363 003c C3F81C42 		str	r4, [r3, #540]
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 364              		.loc 1 518 0
 365 0040 CC69     		ldr	r4, [r1, #28]
 366 0042 ACB9     		cbnz	r4, .L38
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 367              		.loc 1 521 0
 368 0044 D3F80C42 		ldr	r4, [r3, #524]
 369 0048 0440     		ands	r4, r4, r0
 370 004a C3F80C42 		str	r4, [r3, #524]
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 371              		.loc 1 526 0
 372 004e CE68     		ldr	r6, [r1, #12]
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 373              		.loc 1 527 0
 374 0050 8D88     		ldrh	r5, [r1, #4]
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 375              		.loc 1 525 0
 376 0052 4C69     		ldr	r4, [r1, #20]
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 377              		.loc 1 526 0
 378 0054 45EA0645 		orr	r5, r5, r6, lsl #16
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 379              		.loc 1 525 0
 380 0058 4834     		adds	r4, r4, #72
 381 005a 43F83450 		str	r5, [r3, r4, lsl #3]
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 382              		.loc 1 532 0
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 19


 383 005e 8E68     		ldr	r6, [r1, #8]
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 384              		.loc 1 533 0
 385 0060 0D88     		ldrh	r5, [r1]
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 386              		.loc 1 531 0
 387 0062 4C69     		ldr	r4, [r1, #20]
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 388              		.loc 1 532 0
 389 0064 45EA0645 		orr	r5, r5, r6, lsl #16
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 390              		.loc 1 531 0
 391 0068 4834     		adds	r4, r4, #72
 392 006a 03EBC404 		add	r4, r3, r4, lsl #3
 393 006e 6560     		str	r5, [r4, #4]
 394              	.L38:
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 395              		.loc 1 536 0
 396 0070 CC69     		ldr	r4, [r1, #28]
 397 0072 012C     		cmp	r4, #1
 398 0074 19D0     		beq	.L51
 399              	.L39:
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 400              		.loc 1 553 0
 401 0076 8C69     		ldr	r4, [r1, #24]
 402 0078 74BB     		cbnz	r4, .L40
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 403              		.loc 1 556 0
 404 007a D3F80442 		ldr	r4, [r3, #516]
 405 007e 0440     		ands	r4, r4, r0
 406 0080 C3F80442 		str	r4, [r3, #516]
 407              	.L41:
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 408              		.loc 1 565 0
 409 0084 0C69     		ldr	r4, [r1, #16]
 410 0086 6CBB     		cbnz	r4, .L42
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 411              		.loc 1 568 0
 412 0088 D3F81442 		ldr	r4, [r3, #532]
 413 008c 2040     		ands	r0, r0, r4
 414 008e C3F81402 		str	r0, [r3, #532]
 415              	.L43:
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 416              		.loc 1 577 0
 417 0092 096A     		ldr	r1, [r1, #32]
 418              	.LVL24:
 419 0094 0129     		cmp	r1, #1
 420 0096 2BD0     		beq	.L52
 421              	.LVL25:
 422              	.L44:
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 423              		.loc 1 583 0
 424 0098 D3F80022 		ldr	r2, [r3, #512]
 425 009c 22F00102 		bic	r2, r2, #1
 426 00a0 C3F80022 		str	r2, [r3, #512]
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 427              		.loc 1 586 0
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 20


 428 00a4 0020     		movs	r0, #0
 429              		.loc 1 595 0
 430 00a6 70BC     		pop	{r4, r5, r6}
 431              	.LCFI3:
 432              		.cfi_remember_state
 433              		.cfi_restore 6
 434              		.cfi_restore 5
 435              		.cfi_restore 4
 436              		.cfi_def_cfa_offset 0
 437 00a8 7047     		bx	lr
 438              	.LVL26:
 439              	.L51:
 440              	.LCFI4:
 441              		.cfi_restore_state
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 442              		.loc 1 539 0
 443 00aa D3F80C42 		ldr	r4, [r3, #524]
 444 00ae 1443     		orrs	r4, r4, r2
 445 00b0 C3F80C42 		str	r4, [r3, #524]
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 446              		.loc 1 543 0
 447 00b4 0E68     		ldr	r6, [r1]
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 448              		.loc 1 544 0
 449 00b6 8D88     		ldrh	r5, [r1, #4]
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 450              		.loc 1 542 0
 451 00b8 4C69     		ldr	r4, [r1, #20]
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 452              		.loc 1 543 0
 453 00ba 45EA0645 		orr	r5, r5, r6, lsl #16
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 454              		.loc 1 542 0
 455 00be 4834     		adds	r4, r4, #72
 456 00c0 43F83450 		str	r5, [r3, r4, lsl #3]
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 457              		.loc 1 548 0
 458 00c4 8E68     		ldr	r6, [r1, #8]
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 459              		.loc 1 549 0
 460 00c6 8D89     		ldrh	r5, [r1, #12]
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 461              		.loc 1 547 0
 462 00c8 4C69     		ldr	r4, [r1, #20]
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 463              		.loc 1 548 0
 464 00ca 45EA0645 		orr	r5, r5, r6, lsl #16
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 465              		.loc 1 547 0
 466 00ce 4834     		adds	r4, r4, #72
 467 00d0 03EBC404 		add	r4, r3, r4, lsl #3
 468 00d4 6560     		str	r5, [r4, #4]
 469 00d6 CEE7     		b	.L39
 470              	.L40:
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 471              		.loc 1 561 0
 472 00d8 D3F80442 		ldr	r4, [r3, #516]
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 21


 473 00dc 1443     		orrs	r4, r4, r2
 474 00de C3F80442 		str	r4, [r3, #516]
 475 00e2 CFE7     		b	.L41
 476              	.L42:
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 477              		.loc 1 573 0
 478 00e4 D3F81402 		ldr	r0, [r3, #532]
 479 00e8 1043     		orrs	r0, r0, r2
 480 00ea C3F81402 		str	r0, [r3, #532]
 481 00ee D0E7     		b	.L43
 482              	.LVL27:
 483              	.L52:
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 484              		.loc 1 579 0
 485 00f0 D3F81C12 		ldr	r1, [r3, #540]
 486 00f4 0A43     		orrs	r2, r2, r1
 487              	.LVL28:
 488 00f6 C3F81C22 		str	r2, [r3, #540]
 489 00fa CDE7     		b	.L44
 490              		.cfi_endproc
 491              	.LFE70:
 493              		.section	.text.HAL_CAN_Start,"ax",%progbits
 494              		.align	1
 495              		.global	HAL_CAN_Start
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu softvfp
 501              	HAL_CAN_Start:
 502              	.LFB71:
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Control functions
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                       ##### Control functions #####
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              and activate the corresponding
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              transmission request
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                              pending on the selected Tx mailbox
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 22


 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Start the CAN module.
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 503              		.loc 1 635 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              	.LVL29:
 508 0000 38B5     		push	{r3, r4, r5, lr}
 509              	.LCFI5:
 510              		.cfi_def_cfa_offset 16
 511              		.cfi_offset 3, -16
 512              		.cfi_offset 4, -12
 513              		.cfi_offset 5, -8
 514              		.cfi_offset 14, -4
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 515              		.loc 1 638 0
 516 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 517 0006 DBB2     		uxtb	r3, r3
 518 0008 012B     		cmp	r3, #1
 519 000a 05D0     		beq	.L59
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Change CAN peripheral state */
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request leave initialisation */
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get tick */
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     tickstart = HAL_GetTick();
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait the acknowledge */
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check for the Timeout */
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Change CAN state */
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 23


 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset the CAN ErrorCode */
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 520              		.loc 1 674 0
 521 000c 436A     		ldr	r3, [r0, #36]
 522 000e 43F40023 		orr	r3, r3, #524288
 523 0012 4362     		str	r3, [r0, #36]
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 524              		.loc 1 676 0
 525 0014 0120     		movs	r0, #1
 526              	.LVL30:
 527              	.L56:
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 528              		.loc 1 678 0
 529 0016 38BD     		pop	{r3, r4, r5, pc}
 530              	.LVL31:
 531              	.L59:
 532 0018 0446     		mov	r4, r0
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 533              		.loc 1 641 0
 534 001a 0223     		movs	r3, #2
 535 001c 80F82030 		strb	r3, [r0, #32]
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 536              		.loc 1 644 0
 537 0020 0268     		ldr	r2, [r0]
 538 0022 1368     		ldr	r3, [r2]
 539 0024 23F00103 		bic	r3, r3, #1
 540 0028 1360     		str	r3, [r2]
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 541              		.loc 1 647 0
 542 002a FFF7FEFF 		bl	HAL_GetTick
 543              	.LVL32:
 544 002e 0546     		mov	r5, r0
 545              	.LVL33:
 546              	.L55:
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 547              		.loc 1 650 0
 548 0030 2368     		ldr	r3, [r4]
 549 0032 5B68     		ldr	r3, [r3, #4]
 550 0034 13F0010F 		tst	r3, #1
 551 0038 0DD0     		beq	.L60
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 552              		.loc 1 653 0
 553 003a FFF7FEFF 		bl	HAL_GetTick
 554              	.LVL34:
 555 003e 401B     		subs	r0, r0, r5
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 24


 556 0040 0A28     		cmp	r0, #10
 557 0042 F5D9     		bls	.L55
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 558              		.loc 1 656 0
 559 0044 636A     		ldr	r3, [r4, #36]
 560 0046 43F40033 		orr	r3, r3, #131072
 561 004a 6362     		str	r3, [r4, #36]
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 562              		.loc 1 659 0
 563 004c 0523     		movs	r3, #5
 564 004e 84F82030 		strb	r3, [r4, #32]
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 565              		.loc 1 661 0
 566 0052 0120     		movs	r0, #1
 567 0054 DFE7     		b	.L56
 568              	.L60:
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 569              		.loc 1 666 0
 570 0056 0020     		movs	r0, #0
 571 0058 6062     		str	r0, [r4, #36]
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 572              		.loc 1 669 0
 573 005a DCE7     		b	.L56
 574              		.cfi_endproc
 575              	.LFE71:
 577              		.section	.text.HAL_CAN_Stop,"ax",%progbits
 578              		.align	1
 579              		.global	HAL_CAN_Stop
 580              		.syntax unified
 581              		.thumb
 582              		.thumb_func
 583              		.fpu softvfp
 585              	HAL_CAN_Stop:
 586              	.LFB72:
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 587              		.loc 1 687 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591              	.LVL35:
 592 0000 38B5     		push	{r3, r4, r5, lr}
 593              	.LCFI6:
 594              		.cfi_def_cfa_offset 16
 595              		.cfi_offset 3, -16
 596              		.cfi_offset 4, -12
 597              		.cfi_offset 5, -8
 598              		.cfi_offset 14, -4
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tickstart;
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 25


 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 599              		.loc 1 690 0
 600 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 601 0006 DBB2     		uxtb	r3, r3
 602 0008 022B     		cmp	r3, #2
 603 000a 05D0     		beq	.L67
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request initialisation */
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get tick */
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     tickstart = HAL_GetTick();
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait the acknowledge */
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check for the Timeout */
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Change CAN state */
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Exit from sleep mode */
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Change CAN peripheral state */
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 604              		.loc 1 726 0
 605 000c 436A     		ldr	r3, [r0, #36]
 606 000e 43F48013 		orr	r3, r3, #1048576
 607 0012 4362     		str	r3, [r0, #36]
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 608              		.loc 1 728 0
 609 0014 0120     		movs	r0, #1
 610              	.LVL36:
 611              	.L64:
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 612              		.loc 1 730 0
 613 0016 38BD     		pop	{r3, r4, r5, pc}
 614              	.LVL37:
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 26


 615              	.L67:
 616 0018 0446     		mov	r4, r0
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 617              		.loc 1 693 0
 618 001a 0268     		ldr	r2, [r0]
 619 001c 1368     		ldr	r3, [r2]
 620 001e 43F00103 		orr	r3, r3, #1
 621 0022 1360     		str	r3, [r2]
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 622              		.loc 1 696 0
 623 0024 FFF7FEFF 		bl	HAL_GetTick
 624              	.LVL38:
 625 0028 0546     		mov	r5, r0
 626              	.LVL39:
 627              	.L63:
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 628              		.loc 1 699 0
 629 002a 2368     		ldr	r3, [r4]
 630 002c 5A68     		ldr	r2, [r3, #4]
 631 002e 12F0010F 		tst	r2, #1
 632 0032 0DD1     		bne	.L68
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 633              		.loc 1 702 0
 634 0034 FFF7FEFF 		bl	HAL_GetTick
 635              	.LVL40:
 636 0038 401B     		subs	r0, r0, r5
 637 003a 0A28     		cmp	r0, #10
 638 003c F5D9     		bls	.L63
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 639              		.loc 1 705 0
 640 003e 636A     		ldr	r3, [r4, #36]
 641 0040 43F40033 		orr	r3, r3, #131072
 642 0044 6362     		str	r3, [r4, #36]
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 643              		.loc 1 708 0
 644 0046 0523     		movs	r3, #5
 645 0048 84F82030 		strb	r3, [r4, #32]
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 646              		.loc 1 710 0
 647 004c 0120     		movs	r0, #1
 648 004e E2E7     		b	.L64
 649              	.L68:
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 650              		.loc 1 715 0
 651 0050 1A68     		ldr	r2, [r3]
 652 0052 22F00202 		bic	r2, r2, #2
 653 0056 1A60     		str	r2, [r3]
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 654              		.loc 1 718 0
 655 0058 0123     		movs	r3, #1
 656 005a 84F82030 		strb	r3, [r4, #32]
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 657              		.loc 1 721 0
 658 005e 0020     		movs	r0, #0
 659 0060 D9E7     		b	.L64
 660              		.cfi_endproc
 661              	.LFE72:
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 27


 663              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 664              		.align	1
 665              		.global	HAL_CAN_DeInit
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
 669              		.fpu softvfp
 671              	HAL_CAN_DeInit:
 672              	.LFB67:
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 673              		.loc 1 379 0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677              	.LVL41:
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 678              		.loc 1 381 0
 679 0000 80B1     		cbz	r0, .L71
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check CAN handle */
 680              		.loc 1 379 0
 681 0002 10B5     		push	{r4, lr}
 682              	.LCFI7:
 683              		.cfi_def_cfa_offset 8
 684              		.cfi_offset 4, -8
 685              		.cfi_offset 14, -4
 686 0004 0446     		mov	r4, r0
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 687              		.loc 1 390 0
 688 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 689              	.LVL42:
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 690              		.loc 1 393 0
 691 000a 2046     		mov	r0, r4
 692 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 693              	.LVL43:
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 694              		.loc 1 396 0
 695 0010 2268     		ldr	r2, [r4]
 696 0012 1368     		ldr	r3, [r2]
 697 0014 43F40043 		orr	r3, r3, #32768
 698 0018 1360     		str	r3, [r2]
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 699              		.loc 1 399 0
 700 001a 0020     		movs	r0, #0
 701 001c 6062     		str	r0, [r4, #36]
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 702              		.loc 1 402 0
 703 001e 84F82000 		strb	r0, [r4, #32]
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 704              		.loc 1 406 0
 705 0022 10BD     		pop	{r4, pc}
 706              	.LVL44:
 707              	.L71:
 708              	.LCFI8:
 709              		.cfi_def_cfa_offset 0
 710              		.cfi_restore 4
 711              		.cfi_restore 14
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 28


 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 712              		.loc 1 383 0
 713 0024 0120     		movs	r0, #1
 714              	.LVL45:
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 715              		.loc 1 406 0
 716 0026 7047     		bx	lr
 717              		.cfi_endproc
 718              	.LFE67:
 720              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 721              		.align	1
 722              		.global	HAL_CAN_RequestSleep
 723              		.syntax unified
 724              		.thumb
 725              		.thumb_func
 726              		.fpu softvfp
 728              	HAL_CAN_RequestSleep:
 729              	.LFB73:
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         of a CAN frame) has been completed.
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status.
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 730              		.loc 1 742 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734              		@ link register save eliminated.
 735              	.LVL46:
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 736              		.loc 1 743 0
 737 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 738              	.LVL47:
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 739              		.loc 1 745 0
 740 0004 013B     		subs	r3, r3, #1
 741              	.LVL48:
 742 0006 DBB2     		uxtb	r3, r3
 743 0008 012B     		cmp	r3, #1
 744 000a 05D9     		bls	.L79
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Request Sleep mode */
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 29


 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 745              		.loc 1 757 0
 746 000c 436A     		ldr	r3, [r0, #36]
 747 000e 43F48023 		orr	r3, r3, #262144
 748 0012 4362     		str	r3, [r0, #36]
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 749              		.loc 1 760 0
 750 0014 0120     		movs	r0, #1
 751              	.LVL49:
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 752              		.loc 1 762 0
 753 0016 7047     		bx	lr
 754              	.LVL50:
 755              	.L79:
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 756              		.loc 1 749 0
 757 0018 0268     		ldr	r2, [r0]
 758 001a 1368     		ldr	r3, [r2]
 759 001c 43F00203 		orr	r3, r3, #2
 760 0020 1360     		str	r3, [r2]
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 761              		.loc 1 752 0
 762 0022 0020     		movs	r0, #0
 763              	.LVL51:
 764 0024 7047     		bx	lr
 765              		.cfi_endproc
 766              	.LFE73:
 768              		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 769              		.align	1
 770              		.global	HAL_CAN_WakeUp
 771              		.syntax unified
 772              		.thumb
 773              		.thumb_func
 774              		.fpu softvfp
 776              	HAL_CAN_WakeUp:
 777              	.LFB74:
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Wake up from sleep mode.
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         is exited.
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status.
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 778              		.loc 1 773 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 8
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              		@ link register save eliminated.
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 30


 783              	.LVL52:
 784 0000 82B0     		sub	sp, sp, #8
 785              	.LCFI9:
 786              		.cfi_def_cfa_offset 8
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   __IO uint32_t count = 0;
 787              		.loc 1 774 0
 788 0002 0023     		movs	r3, #0
 789 0004 0193     		str	r3, [sp, #4]
 790              	.LVL53:
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t timeout = 1000000U;
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 791              		.loc 1 776 0
 792 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 793              	.LVL54:
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 794              		.loc 1 778 0
 795 000a 013B     		subs	r3, r3, #1
 796              	.LVL55:
 797 000c DBB2     		uxtb	r3, r3
 798 000e 012B     		cmp	r3, #1
 799 0010 06D9     		bls	.L86
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wake up request */
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Wait sleep mode is exited */
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     do
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Increment counter */
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       count++;
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check if timeout is reached */
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (count > timeout)
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800              		.loc 1 807 0
 801 0012 436A     		ldr	r3, [r0, #36]
 802 0014 43F48023 		orr	r3, r3, #262144
 803 0018 4362     		str	r3, [r0, #36]
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 31


 804              		.loc 1 809 0
 805 001a 0120     		movs	r0, #1
 806              	.LVL56:
 807              	.L83:
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 808              		.loc 1 811 0
 809 001c 02B0     		add	sp, sp, #8
 810              	.LCFI10:
 811              		.cfi_remember_state
 812              		.cfi_def_cfa_offset 0
 813              		@ sp needed
 814 001e 7047     		bx	lr
 815              	.LVL57:
 816              	.L86:
 817              	.LCFI11:
 818              		.cfi_restore_state
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 819              		.loc 1 782 0
 820 0020 0268     		ldr	r2, [r0]
 821 0022 1368     		ldr	r3, [r2]
 822 0024 23F00203 		bic	r3, r3, #2
 823 0028 1360     		str	r3, [r2]
 824              	.L84:
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 825              		.loc 1 788 0
 826 002a 019B     		ldr	r3, [sp, #4]
 827 002c 0133     		adds	r3, r3, #1
 828 002e 0193     		str	r3, [sp, #4]
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 829              		.loc 1 791 0
 830 0030 019A     		ldr	r2, [sp, #4]
 831 0032 084B     		ldr	r3, .L88
 832 0034 9A42     		cmp	r2, r3
 833 0036 06D8     		bhi	.L87
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 834              		.loc 1 799 0
 835 0038 0368     		ldr	r3, [r0]
 836 003a 5B68     		ldr	r3, [r3, #4]
 837 003c 13F0020F 		tst	r3, #2
 838 0040 F3D1     		bne	.L84
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 839              		.loc 1 802 0
 840 0042 0020     		movs	r0, #0
 841              	.LVL58:
 842 0044 EAE7     		b	.L83
 843              	.LVL59:
 844              	.L87:
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 845              		.loc 1 794 0
 846 0046 436A     		ldr	r3, [r0, #36]
 847 0048 43F40033 		orr	r3, r3, #131072
 848 004c 4362     		str	r3, [r0, #36]
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 849              		.loc 1 796 0
 850 004e 0120     		movs	r0, #1
 851              	.LVL60:
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 32


 852 0050 E4E7     		b	.L83
 853              	.L89:
 854 0052 00BF     		.align	2
 855              	.L88:
 856 0054 40420F00 		.word	1000000
 857              		.cfi_endproc
 858              	.LFE74:
 860              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 861              		.align	1
 862              		.global	HAL_CAN_IsSleepActive
 863              		.syntax unified
 864              		.thumb
 865              		.thumb_func
 866              		.fpu softvfp
 868              	HAL_CAN_IsSleepActive:
 869              	.LFB75:
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Check is sleep mode is active.
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Status
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 1 : Sleep mode is active.
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 870              		.loc 1 822 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              		@ link register save eliminated.
 875              	.LVL61:
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 876              		.loc 1 824 0
 877 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 878              	.LVL62:
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 879              		.loc 1 826 0
 880 0004 013B     		subs	r3, r3, #1
 881              	.LVL63:
 882 0006 DBB2     		uxtb	r3, r3
 883 0008 012B     		cmp	r3, #1
 884 000a 01D9     		bls	.L94
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
 885              		.loc 1 823 0
 886 000c 0020     		movs	r0, #0
 887              	.LVL64:
 888 000e 7047     		bx	lr
 889              	.LVL65:
 890              	.L94:
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Sleep mode */
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 33


 891              		.loc 1 830 0
 892 0010 0368     		ldr	r3, [r0]
 893 0012 5B68     		ldr	r3, [r3, #4]
 894 0014 13F0020F 		tst	r3, #2
 895 0018 01D0     		beq	.L95
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       status = 1U;
 896              		.loc 1 832 0
 897 001a 0120     		movs	r0, #1
 898              	.LVL66:
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return function status */
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 899              		.loc 1 838 0
 900 001c 7047     		bx	lr
 901              	.LVL67:
 902              	.L95:
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 903              		.loc 1 823 0
 904 001e 0020     		movs	r0, #0
 905              	.LVL68:
 906 0020 7047     		bx	lr
 907              		.cfi_endproc
 908              	.LFE75:
 910              		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 911              		.align	1
 912              		.global	HAL_CAN_AddTxMessage
 913              		.syntax unified
 914              		.thumb
 915              		.thumb_func
 916              		.fpu softvfp
 918              	HAL_CAN_AddTxMessage:
 919              	.LFB76:
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         corresponding transmission request.
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 920              		.loc 1 853 0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 0
 923              		@ frame_needed = 0, uses_anonymous_args = 0
 924              		@ link register save eliminated.
 925              	.LVL69:
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 34


 926 0000 70B4     		push	{r4, r5, r6}
 927              	.LCFI12:
 928              		.cfi_def_cfa_offset 12
 929              		.cfi_offset 4, -12
 930              		.cfi_offset 5, -8
 931              		.cfi_offset 6, -4
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 932              		.loc 1 855 0
 933 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 934              	.LVL70:
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 935              		.loc 1 856 0
 936 0006 0568     		ldr	r5, [r0]
 937 0008 AD68     		ldr	r5, [r5, #8]
 938              	.LVL71:
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check the parameters */
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 939              		.loc 1 872 0
 940 000a 013C     		subs	r4, r4, #1
 941              	.LVL72:
 942 000c E4B2     		uxtb	r4, r4
 943 000e 012C     		cmp	r4, #1
 944 0010 06D9     		bls	.L105
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (((tsr & CAN_TSR_TME0) != 0U) ||
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME2) != 0U))
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Select an empty transmit mailbox */
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check transmit mailbox value */
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (transmitmailbox > 2U)
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 35


 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Store the Tx mailbox */
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       *pTxMailbox = (uint32_t)1 << transmitmailbox;
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the Id */
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the DLC */
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set up the data field */
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Request transmission */
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Return function status */
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_OK;
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Update error code */
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       return HAL_ERROR;
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 945              		.loc 1 946 0
 946 0012 436A     		ldr	r3, [r0, #36]
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 36


 947              	.LVL73:
 948 0014 43F48023 		orr	r3, r3, #262144
 949 0018 4362     		str	r3, [r0, #36]
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 950              		.loc 1 948 0
 951 001a 0120     		movs	r0, #1
 952              	.LVL74:
 953              	.L100:
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 954              		.loc 1 950 0
 955 001c 70BC     		pop	{r4, r5, r6}
 956              	.LCFI13:
 957              		.cfi_remember_state
 958              		.cfi_restore 6
 959              		.cfi_restore 5
 960              		.cfi_restore 4
 961              		.cfi_def_cfa_offset 0
 962 001e 7047     		bx	lr
 963              	.LVL75:
 964              	.L105:
 965              	.LCFI14:
 966              		.cfi_restore_state
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
 967              		.loc 1 876 0
 968 0020 15F0E05F 		tst	r5, #469762048
 969 0024 5BD0     		beq	.L98
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 970              		.loc 1 881 0
 971 0026 C5F30165 		ubfx	r5, r5, #24, #2
 972              	.LVL76:
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 973              		.loc 1 884 0
 974 002a 022D     		cmp	r5, #2
 975 002c 3ED8     		bhi	.L106
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 976              		.loc 1 893 0
 977 002e 0124     		movs	r4, #1
 978 0030 AC40     		lsls	r4, r4, r5
 979 0032 1C60     		str	r4, [r3]
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 980              		.loc 1 896 0
 981 0034 8B68     		ldr	r3, [r1, #8]
 982              	.LVL77:
 983 0036 002B     		cmp	r3, #0
 984 0038 3ED1     		bne	.L101
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 985              		.loc 1 898 0
 986 003a 0E68     		ldr	r6, [r1]
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 987              		.loc 1 899 0
 988 003c CB68     		ldr	r3, [r1, #12]
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 989              		.loc 1 898 0
 990 003e 0468     		ldr	r4, [r0]
 991 0040 43EA4656 		orr	r6, r3, r6, lsl #21
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 37


 992 0044 05F11803 		add	r3, r5, #24
 993 0048 1B01     		lsls	r3, r3, #4
 994 004a E650     		str	r6, [r4, r3]
 995              	.L102:
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 996              		.loc 1 909 0
 997 004c 0368     		ldr	r3, [r0]
 998 004e 0C69     		ldr	r4, [r1, #16]
 999 0050 05F11806 		add	r6, r5, #24
 1000 0054 03EB0613 		add	r3, r3, r6, lsl #4
 1001 0058 5C60     		str	r4, [r3, #4]
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 1002              		.loc 1 912 0
 1003 005a 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 1004 005c 012B     		cmp	r3, #1
 1005 005e 36D0     		beq	.L107
 1006              	.LVL78:
 1007              	.L103:
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 1008              		.loc 1 918 0
 1009 0060 D179     		ldrb	r1, [r2, #7]	@ zero_extendqisi2
 1010 0062 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 1011 0064 1B04     		lsls	r3, r3, #16
 1012 0066 43EA0163 		orr	r3, r3, r1, lsl #24
 1013 006a 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1014 006c 43EA0123 		orr	r3, r3, r1, lsl #8
 1015 0070 1479     		ldrb	r4, [r2, #4]	@ zero_extendqisi2
 1016 0072 0168     		ldr	r1, [r0]
 1017 0074 2343     		orrs	r3, r3, r4
 1018 0076 2C01     		lsls	r4, r5, #4
 1019 0078 2144     		add	r1, r1, r4
 1020 007a C1F88C31 		str	r3, [r1, #396]
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 1021              		.loc 1 923 0
 1022 007e D178     		ldrb	r1, [r2, #3]	@ zero_extendqisi2
 1023 0080 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1024 0082 1B04     		lsls	r3, r3, #16
 1025 0084 43EA0163 		orr	r3, r3, r1, lsl #24
 1026 0088 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1027 008a 43EA0123 		orr	r3, r3, r1, lsl #8
 1028 008e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1029 0090 0268     		ldr	r2, [r0]
 1030              	.LVL79:
 1031 0092 0B43     		orrs	r3, r3, r1
 1032 0094 2244     		add	r2, r2, r4
 1033 0096 C2F88831 		str	r3, [r2, #392]
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1034              		.loc 1 930 0
 1035 009a 0268     		ldr	r2, [r0]
 1036 009c 1835     		adds	r5, r5, #24
 1037              	.LVL80:
 1038 009e 2D01     		lsls	r5, r5, #4
 1039 00a0 5359     		ldr	r3, [r2, r5]
 1040 00a2 43F00103 		orr	r3, r3, #1
 1041 00a6 5351     		str	r3, [r2, r5]
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1042              		.loc 1 933 0
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 38


 1043 00a8 0020     		movs	r0, #0
 1044              	.LVL81:
 1045 00aa B7E7     		b	.L100
 1046              	.LVL82:
 1047              	.L106:
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1048              		.loc 1 887 0
 1049 00ac 436A     		ldr	r3, [r0, #36]
 1050              	.LVL83:
 1051 00ae 43F40003 		orr	r3, r3, #8388608
 1052 00b2 4362     		str	r3, [r0, #36]
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1053              		.loc 1 889 0
 1054 00b4 0120     		movs	r0, #1
 1055              	.LVL84:
 1056 00b6 B1E7     		b	.L100
 1057              	.LVL85:
 1058              	.L101:
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1059              		.loc 1 903 0
 1060 00b8 4C68     		ldr	r4, [r1, #4]
 1061 00ba 43EAC403 		orr	r3, r3, r4, lsl #3
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1062              		.loc 1 905 0
 1063 00be CC68     		ldr	r4, [r1, #12]
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1064              		.loc 1 903 0
 1065 00c0 0668     		ldr	r6, [r0]
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->RTR);
 1066              		.loc 1 904 0
 1067 00c2 2343     		orrs	r3, r3, r4
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                                                            pHeader->IDE |
 1068              		.loc 1 903 0
 1069 00c4 05F11804 		add	r4, r5, #24
 1070 00c8 2401     		lsls	r4, r4, #4
 1071 00ca 3351     		str	r3, [r6, r4]
 1072 00cc BEE7     		b	.L102
 1073              	.L107:
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1074              		.loc 1 914 0
 1075 00ce 0368     		ldr	r3, [r0]
 1076 00d0 03EB0613 		add	r3, r3, r6, lsl #4
 1077 00d4 5968     		ldr	r1, [r3, #4]
 1078              	.LVL86:
 1079 00d6 41F48071 		orr	r1, r1, #256
 1080 00da 5960     		str	r1, [r3, #4]
 1081 00dc C0E7     		b	.L103
 1082              	.LVL87:
 1083              	.L98:
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1084              		.loc 1 938 0
 1085 00de 436A     		ldr	r3, [r0, #36]
 1086              	.LVL88:
 1087 00e0 43F40013 		orr	r3, r3, #2097152
 1088 00e4 4362     		str	r3, [r0, #36]
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1089              		.loc 1 940 0
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 39


 1090 00e6 0120     		movs	r0, #1
 1091              	.LVL89:
 1092 00e8 98E7     		b	.L100
 1093              		.cfi_endproc
 1094              	.LFE76:
 1096              		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1097              		.align	1
 1098              		.global	HAL_CAN_AbortTxRequest
 1099              		.syntax unified
 1100              		.thumb
 1101              		.thumb_func
 1102              		.fpu softvfp
 1104              	HAL_CAN_AbortTxRequest:
 1105              	.LFB77:
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Abort transmission requests
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1106              		.loc 1 961 0
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 0
 1109              		@ frame_needed = 0, uses_anonymous_args = 0
 1110              		@ link register save eliminated.
 1111              	.LVL90:
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1112              		.loc 1 962 0
 1113 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1114              	.LVL91:
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1115              		.loc 1 967 0
 1116 0004 013B     		subs	r3, r3, #1
 1117              	.LVL92:
 1118 0006 DBB2     		uxtb	r3, r3
 1119 0008 012B     		cmp	r3, #1
 1120 000a 05D9     		bls	.L114
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 0 */
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 1 */
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 40


 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 2 */
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1121              		.loc 1 997 0
 1122 000c 436A     		ldr	r3, [r0, #36]
 1123 000e 43F48023 		orr	r3, r3, #262144
 1124 0012 4362     		str	r3, [r0, #36]
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1125              		.loc 1 999 0
 1126 0014 0120     		movs	r0, #1
 1127              	.LVL93:
 1128 0016 7047     		bx	lr
 1129              	.LVL94:
 1130              	.L114:
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1131              		.loc 1 971 0
 1132 0018 11F0010F 		tst	r1, #1
 1133 001c 04D0     		beq	.L110
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1134              		.loc 1 974 0
 1135 001e 0268     		ldr	r2, [r0]
 1136 0020 9368     		ldr	r3, [r2, #8]
 1137 0022 43F08003 		orr	r3, r3, #128
 1138 0026 9360     		str	r3, [r2, #8]
 1139              	.L110:
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1140              		.loc 1 978 0
 1141 0028 11F0020F 		tst	r1, #2
 1142 002c 04D0     		beq	.L111
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1143              		.loc 1 981 0
 1144 002e 0268     		ldr	r2, [r0]
 1145 0030 9368     		ldr	r3, [r2, #8]
 1146 0032 43F40043 		orr	r3, r3, #32768
 1147 0036 9360     		str	r3, [r2, #8]
 1148              	.L111:
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1149              		.loc 1 985 0
 1150 0038 11F0040F 		tst	r1, #4
 1151 003c 06D0     		beq	.L113
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 41


 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1152              		.loc 1 988 0
 1153 003e 0268     		ldr	r2, [r0]
 1154 0040 9368     		ldr	r3, [r2, #8]
 1155 0042 43F40003 		orr	r3, r3, #8388608
 1156 0046 9360     		str	r3, [r2, #8]
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1157              		.loc 1 992 0
 1158 0048 0020     		movs	r0, #0
 1159              	.LVL95:
 1160 004a 7047     		bx	lr
 1161              	.LVL96:
 1162              	.L113:
 1163 004c 0020     		movs	r0, #0
 1164              	.LVL97:
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1165              		.loc 1 1001 0
 1166 004e 7047     		bx	lr
 1167              		.cfi_endproc
 1168              	.LFE77:
 1170              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1171              		.align	1
 1172              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1173              		.syntax unified
 1174              		.thumb
 1175              		.thumb_func
 1176              		.fpu softvfp
 1178              	HAL_CAN_GetTxMailboxesFreeLevel:
 1179              	.LFB78:
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1180              		.loc 1 1010 0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 0
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 1184              		@ link register save eliminated.
 1185              	.LVL98:
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t freelevel = 0U;
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1186              		.loc 1 1012 0
 1187 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1188              	.LVL99:
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1189              		.loc 1 1014 0
 1190 0004 013B     		subs	r3, r3, #1
 1191              	.LVL100:
 1192 0006 DBB2     		uxtb	r3, r3
 1193 0008 012B     		cmp	r3, #1
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 42


 1194 000a 01D9     		bls	.L121
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t freelevel = 0U;
 1195              		.loc 1 1011 0
 1196 000c 0020     		movs	r0, #0
 1197              	.LVL101:
 1198              	.L115:
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       freelevel++;
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return freelevel;
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1199              		.loc 1 1038 0
 1200 000e 7047     		bx	lr
 1201              	.LVL102:
 1202              	.L121:
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1203              		.loc 1 1018 0
 1204 0010 0368     		ldr	r3, [r0]
 1205 0012 9A68     		ldr	r2, [r3, #8]
 1206 0014 12F0806F 		tst	r2, #67108864
 1207 0018 0BD1     		bne	.L120
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1208              		.loc 1 1011 0
 1209 001a 0020     		movs	r0, #0
 1210              	.LVL103:
 1211              	.L117:
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1212              		.loc 1 1024 0
 1213 001c 9A68     		ldr	r2, [r3, #8]
 1214 001e 12F0006F 		tst	r2, #134217728
 1215 0022 00D0     		beq	.L118
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1216              		.loc 1 1026 0
 1217 0024 0130     		adds	r0, r0, #1
 1218              	.LVL104:
 1219              	.L118:
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1220              		.loc 1 1030 0
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 43


 1221 0026 9B68     		ldr	r3, [r3, #8]
 1222 0028 13F0805F 		tst	r3, #268435456
 1223 002c EFD0     		beq	.L115
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1224              		.loc 1 1032 0
 1225 002e 0130     		adds	r0, r0, #1
 1226              	.LVL105:
 1227 0030 7047     		bx	lr
 1228              	.LVL106:
 1229              	.L120:
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1230              		.loc 1 1020 0
 1231 0032 0120     		movs	r0, #1
 1232              	.LVL107:
 1233 0034 F2E7     		b	.L117
 1234              		.cfi_endproc
 1235              	.LFE78:
 1237              		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1238              		.align	1
 1239              		.global	HAL_CAN_IsTxMessagePending
 1240              		.syntax unified
 1241              		.thumb
 1242              		.thumb_func
 1243              		.fpu softvfp
 1245              	HAL_CAN_IsTxMessagePending:
 1246              	.LFB79:
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         Mailboxes.
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Status
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *                Tx Mailbox.
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1247              		.loc 1 1053 0
 1248              		.cfi_startproc
 1249              		@ args = 0, pretend = 0, frame = 0
 1250              		@ frame_needed = 0, uses_anonymous_args = 0
 1251              		@ link register save eliminated.
 1252              	.LVL108:
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1253              		.loc 1 1055 0
 1254 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1255              	.LVL109:
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 44


 1256              		.loc 1 1060 0
 1257 0004 013B     		subs	r3, r3, #1
 1258              	.LVL110:
 1259 0006 DBB2     		uxtb	r3, r3
 1260 0008 012B     		cmp	r3, #1
 1261 000a 01D9     		bls	.L126
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t status = 0U;
 1262              		.loc 1 1054 0
 1263 000c 0020     		movs	r0, #0
 1264              	.LVL111:
 1265 000e 7047     		bx	lr
 1266              	.LVL112:
 1267              	.L126:
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1268              		.loc 1 1064 0
 1269 0010 0368     		ldr	r3, [r0]
 1270 0012 9B68     		ldr	r3, [r3, #8]
 1271 0014 8906     		lsls	r1, r1, #26
 1272              	.LVL113:
 1273 0016 31EA0303 		bics	r3, r1, r3
 1274 001a 01D0     		beq	.L127
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       status = 1U;
 1275              		.loc 1 1066 0
 1276 001c 0120     		movs	r0, #1
 1277              	.LVL114:
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return status */
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1278              		.loc 1 1072 0
 1279 001e 7047     		bx	lr
 1280              	.LVL115:
 1281              	.L127:
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1282              		.loc 1 1054 0
 1283 0020 0020     		movs	r0, #0
 1284              	.LVL116:
 1285 0022 7047     		bx	lr
 1286              		.cfi_endproc
 1287              	.LFE79:
 1289              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1290              		.align	1
 1291              		.global	HAL_CAN_GetTxTimestamp
 1292              		.syntax unified
 1293              		.thumb
 1294              		.thumb_func
 1295              		.fpu softvfp
 1297              	HAL_CAN_GetTxTimestamp:
 1298              	.LFB80:
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 45


1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             mode is enabled.
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         read.
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1299              		.loc 1 1085 0
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 1303              		@ link register save eliminated.
 1304              	.LVL117:
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t timestamp = 0U;
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t transmitmailbox;
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1305              		.loc 1 1088 0
 1306 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1307              	.LVL118:
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1308              		.loc 1 1093 0
 1309 0004 013B     		subs	r3, r3, #1
 1310              	.LVL119:
 1311 0006 DBB2     		uxtb	r3, r3
 1312 0008 012B     		cmp	r3, #1
 1313 000a 01D9     		bls	.L131
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t timestamp = 0U;
 1314              		.loc 1 1086 0
 1315 000c 0020     		movs	r0, #0
 1316              	.LVL120:
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Select the Tx mailbox */
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get timestamp */
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return the timestamp */
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return timestamp;
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1317              		.loc 1 1105 0
 1318 000e 7047     		bx	lr
 1319              	.LVL121:
 1320              	.L131:
 1321              	.LBB4:
 1322              	.LBB5:
 1323              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 46


   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 47


  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 48


 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 49


 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 50


 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 51


 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 52


 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 53


 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 54


 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 55


 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1324              		.loc 2 531 0
 1325              		.syntax unified
 1326              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1327 0010 91FAA1F1 		rbit r1, r1
 1328              	@ 0 "" 2
 1329              	.LVL122:
 1330              		.thumb
 1331              		.syntax unified
 1332              	.LBE5:
 1333              	.LBE4:
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1334              		.loc 1 1097 0
 1335 0014 B1FA81F1 		clz	r1, r1
 1336              	.LVL123:
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1337              		.loc 1 1100 0
 1338 0018 0368     		ldr	r3, [r0]
 1339 001a 1831     		adds	r1, r1, #24
 1340              	.LVL124:
 1341 001c 03EB0111 		add	r1, r3, r1, lsl #4
 1342              	.LVL125:
 1343 0020 4868     		ldr	r0, [r1, #4]
 1344              	.LVL126:
 1345 0022 000C     		lsrs	r0, r0, #16
 1346              	.LVL127:
 1347 0024 7047     		bx	lr
 1348              		.cfi_endproc
 1349              	.LFE80:
 1351              		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1352              		.align	1
 1353              		.global	HAL_CAN_GetRxMessage
 1354              		.syntax unified
 1355              		.thumb
 1356              		.thumb_func
 1357              		.fpu softvfp
 1359              	HAL_CAN_GetRxMessage:
 1360              	.LFB81:
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 56


1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         of the Rx frame will be stored.
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1361              		.loc 1 1119 0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365              		@ link register save eliminated.
 1366              	.LVL128:
 1367 0000 30B4     		push	{r4, r5}
 1368              	.LCFI15:
 1369              		.cfi_def_cfa_offset 8
 1370              		.cfi_offset 4, -8
 1371              		.cfi_offset 5, -4
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1372              		.loc 1 1120 0
 1373 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1374              	.LVL129:
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1375              		.loc 1 1124 0
 1376 0006 013C     		subs	r4, r4, #1
 1377              	.LVL130:
 1378 0008 E4B2     		uxtb	r4, r4
 1379 000a 012C     		cmp	r4, #1
 1380 000c 06D9     		bls	.L141
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check the Rx FIFO */
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Update error code */
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 57


1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         return HAL_ERROR;
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get the header */
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Get the data */
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Release the FIFO */
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Release RX FIFO 0 */
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Release RX FIFO 1 */
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1381              		.loc 1 1194 0
 1382 000e 436A     		ldr	r3, [r0, #36]
 1383              	.LVL131:
 1384 0010 43F48023 		orr	r3, r3, #262144
 1385 0014 4362     		str	r3, [r0, #36]
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 58


 1386              		.loc 1 1196 0
 1387 0016 0120     		movs	r0, #1
 1388              	.LVL132:
 1389              	.L136:
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1390              		.loc 1 1198 0
 1391 0018 30BC     		pop	{r4, r5}
 1392              	.LCFI16:
 1393              		.cfi_remember_state
 1394              		.cfi_restore 5
 1395              		.cfi_restore 4
 1396              		.cfi_def_cfa_offset 0
 1397 001a 7047     		bx	lr
 1398              	.LVL133:
 1399              	.L141:
 1400              	.LCFI17:
 1401              		.cfi_restore_state
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1402              		.loc 1 1128 0
 1403 001c 0029     		cmp	r1, #0
 1404 001e 6FD1     		bne	.L134
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 1405              		.loc 1 1131 0
 1406 0020 0468     		ldr	r4, [r0]
 1407 0022 E468     		ldr	r4, [r4, #12]
 1408 0024 14F0030F 		tst	r4, #3
 1409 0028 64D0     		beq	.L142
 1410              	.L135:
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1411              		.loc 1 1152 0
 1412 002a 0568     		ldr	r5, [r0]
 1413 002c 01F11B04 		add	r4, r1, #27
 1414 0030 2401     		lsls	r4, r4, #4
 1415 0032 2C59     		ldr	r4, [r5, r4]
 1416 0034 04F00404 		and	r4, r4, #4
 1417 0038 9460     		str	r4, [r2, #8]
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1418              		.loc 1 1153 0
 1419 003a 002C     		cmp	r4, #0
 1420 003c 6BD1     		bne	.L137
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1421              		.loc 1 1155 0
 1422 003e 0568     		ldr	r5, [r0]
 1423 0040 01F11B04 		add	r4, r1, #27
 1424 0044 2401     		lsls	r4, r4, #4
 1425 0046 2C59     		ldr	r4, [r5, r4]
 1426 0048 640D     		lsrs	r4, r4, #21
 1427 004a 1460     		str	r4, [r2]
 1428              	.L138:
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1429              		.loc 1 1161 0
 1430 004c 0568     		ldr	r5, [r0]
 1431 004e 01F11B04 		add	r4, r1, #27
 1432 0052 2401     		lsls	r4, r4, #4
 1433 0054 2D59     		ldr	r5, [r5, r4]
 1434 0056 C5F34005 		ubfx	r5, r5, #1, #1
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 59


 1435 005a D560     		str	r5, [r2, #12]
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1436              		.loc 1 1162 0
 1437 005c 0568     		ldr	r5, [r0]
 1438 005e 2544     		add	r5, r5, r4
 1439 0060 6D68     		ldr	r5, [r5, #4]
 1440 0062 05F00F05 		and	r5, r5, #15
 1441 0066 1561     		str	r5, [r2, #16]
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1442              		.loc 1 1163 0
 1443 0068 0568     		ldr	r5, [r0]
 1444 006a 2544     		add	r5, r5, r4
 1445 006c 6D68     		ldr	r5, [r5, #4]
 1446 006e C5F30725 		ubfx	r5, r5, #8, #8
 1447 0072 9561     		str	r5, [r2, #24]
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1448              		.loc 1 1164 0
 1449 0074 0568     		ldr	r5, [r0]
 1450 0076 2C44     		add	r4, r4, r5
 1451 0078 6468     		ldr	r4, [r4, #4]
 1452 007a 240C     		lsrs	r4, r4, #16
 1453 007c 5461     		str	r4, [r2, #20]
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1454              		.loc 1 1167 0
 1455 007e 0468     		ldr	r4, [r0]
 1456 0080 0A01     		lsls	r2, r1, #4
 1457              	.LVL134:
 1458 0082 1444     		add	r4, r4, r2
 1459 0084 D4F8B841 		ldr	r4, [r4, #440]
 1460 0088 1C70     		strb	r4, [r3]
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1461              		.loc 1 1168 0
 1462 008a 0468     		ldr	r4, [r0]
 1463 008c 1444     		add	r4, r4, r2
 1464 008e D4F8B841 		ldr	r4, [r4, #440]
 1465 0092 C4F30724 		ubfx	r4, r4, #8, #8
 1466 0096 5C70     		strb	r4, [r3, #1]
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1467              		.loc 1 1169 0
 1468 0098 0468     		ldr	r4, [r0]
 1469 009a 1444     		add	r4, r4, r2
 1470 009c D4F8B841 		ldr	r4, [r4, #440]
 1471 00a0 C4F30744 		ubfx	r4, r4, #16, #8
 1472 00a4 9C70     		strb	r4, [r3, #2]
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1473              		.loc 1 1170 0
 1474 00a6 0468     		ldr	r4, [r0]
 1475 00a8 1444     		add	r4, r4, r2
 1476 00aa D4F8B841 		ldr	r4, [r4, #440]
 1477 00ae 240E     		lsrs	r4, r4, #24
 1478 00b0 DC70     		strb	r4, [r3, #3]
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1479              		.loc 1 1171 0
 1480 00b2 0468     		ldr	r4, [r0]
 1481 00b4 1444     		add	r4, r4, r2
 1482 00b6 D4F8BC41 		ldr	r4, [r4, #444]
 1483 00ba 1C71     		strb	r4, [r3, #4]
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 60


1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1484              		.loc 1 1172 0
 1485 00bc 0468     		ldr	r4, [r0]
 1486 00be 1444     		add	r4, r4, r2
 1487 00c0 D4F8BC41 		ldr	r4, [r4, #444]
 1488 00c4 C4F30724 		ubfx	r4, r4, #8, #8
 1489 00c8 5C71     		strb	r4, [r3, #5]
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1490              		.loc 1 1173 0
 1491 00ca 0468     		ldr	r4, [r0]
 1492 00cc 1444     		add	r4, r4, r2
 1493 00ce D4F8BC41 		ldr	r4, [r4, #444]
 1494 00d2 C4F30744 		ubfx	r4, r4, #16, #8
 1495 00d6 9C71     		strb	r4, [r3, #6]
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1496              		.loc 1 1174 0
 1497 00d8 0468     		ldr	r4, [r0]
 1498 00da 2244     		add	r2, r2, r4
 1499 00dc D2F8BC21 		ldr	r2, [r2, #444]
 1500 00e0 120E     		lsrs	r2, r2, #24
 1501 00e2 DA71     		strb	r2, [r3, #7]
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1502              		.loc 1 1177 0
 1503 00e4 F9B9     		cbnz	r1, .L139
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1504              		.loc 1 1180 0
 1505 00e6 0268     		ldr	r2, [r0]
 1506 00e8 D368     		ldr	r3, [r2, #12]
 1507              	.LVL135:
 1508 00ea 43F02003 		orr	r3, r3, #32
 1509 00ee D360     		str	r3, [r2, #12]
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1510              		.loc 1 1189 0
 1511 00f0 0020     		movs	r0, #0
 1512              	.LVL136:
 1513 00f2 91E7     		b	.L136
 1514              	.LVL137:
 1515              	.L142:
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1516              		.loc 1 1134 0
 1517 00f4 436A     		ldr	r3, [r0, #36]
 1518              	.LVL138:
 1519 00f6 43F40013 		orr	r3, r3, #2097152
 1520 00fa 4362     		str	r3, [r0, #36]
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1521              		.loc 1 1136 0
 1522 00fc 0120     		movs	r0, #1
 1523              	.LVL139:
 1524 00fe 8BE7     		b	.L136
 1525              	.LVL140:
 1526              	.L134:
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 1527              		.loc 1 1142 0
 1528 0100 0468     		ldr	r4, [r0]
 1529 0102 2469     		ldr	r4, [r4, #16]
 1530 0104 14F0030F 		tst	r4, #3
 1531 0108 8FD1     		bne	.L135
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 61


1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1532              		.loc 1 1145 0
 1533 010a 436A     		ldr	r3, [r0, #36]
 1534              	.LVL141:
 1535 010c 43F40013 		orr	r3, r3, #2097152
 1536 0110 4362     		str	r3, [r0, #36]
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 1537              		.loc 1 1147 0
 1538 0112 0120     		movs	r0, #1
 1539              	.LVL142:
 1540 0114 80E7     		b	.L136
 1541              	.LVL143:
 1542              	.L137:
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1543              		.loc 1 1159 0
 1544 0116 0568     		ldr	r5, [r0]
 1545 0118 01F11B04 		add	r4, r1, #27
 1546 011c 2401     		lsls	r4, r4, #4
 1547 011e 2C59     		ldr	r4, [r5, r4]
 1548 0120 E408     		lsrs	r4, r4, #3
 1549 0122 5460     		str	r4, [r2, #4]
 1550 0124 92E7     		b	.L138
 1551              	.LVL144:
 1552              	.L139:
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1553              		.loc 1 1185 0
 1554 0126 0268     		ldr	r2, [r0]
 1555 0128 1369     		ldr	r3, [r2, #16]
 1556              	.LVL145:
 1557 012a 43F02003 		orr	r3, r3, #32
 1558 012e 1361     		str	r3, [r2, #16]
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1559              		.loc 1 1189 0
 1560 0130 0020     		movs	r0, #0
 1561              	.LVL146:
 1562 0132 71E7     		b	.L136
 1563              		.cfi_endproc
 1564              	.LFE81:
 1566              		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1567              		.align	1
 1568              		.global	HAL_CAN_GetRxFifoFillLevel
 1569              		.syntax unified
 1570              		.thumb
 1571              		.thumb_func
 1572              		.fpu softvfp
 1574              	HAL_CAN_GetRxFifoFillLevel:
 1575              	.LFB82:
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 62


1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1576              		.loc 1 1209 0
 1577              		.cfi_startproc
 1578              		@ args = 0, pretend = 0, frame = 0
 1579              		@ frame_needed = 0, uses_anonymous_args = 0
 1580              		@ link register save eliminated.
 1581              	.LVL147:
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filllevel = 0U;
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1582              		.loc 1 1211 0
 1583 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1584              	.LVL148:
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1585              		.loc 1 1216 0
 1586 0004 013B     		subs	r3, r3, #1
 1587              	.LVL149:
 1588 0006 DBB2     		uxtb	r3, r3
 1589 0008 012B     		cmp	r3, #1
 1590 000a 01D9     		bls	.L147
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t filllevel = 0U;
 1591              		.loc 1 1210 0
 1592 000c 0020     		movs	r0, #0
 1593              	.LVL150:
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return Rx FIFO fill level */
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return filllevel;
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1594              		.loc 1 1231 0
 1595 000e 7047     		bx	lr
 1596              	.LVL151:
 1597              	.L147:
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 1598              		.loc 1 1219 0
 1599 0010 21B1     		cbz	r1, .L148
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1600              		.loc 1 1225 0
 1601 0012 0368     		ldr	r3, [r0]
 1602 0014 1869     		ldr	r0, [r3, #16]
 1603              	.LVL152:
 1604 0016 00F00300 		and	r0, r0, #3
 1605              	.LVL153:
 1606 001a 7047     		bx	lr
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 63


 1607              	.LVL154:
 1608              	.L148:
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 1609              		.loc 1 1221 0
 1610 001c 0368     		ldr	r3, [r0]
 1611 001e D868     		ldr	r0, [r3, #12]
 1612              	.LVL155:
 1613 0020 00F00300 		and	r0, r0, #3
 1614              	.LVL156:
 1615 0024 7047     		bx	lr
 1616              		.cfi_endproc
 1617              	.LFE82:
 1619              		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 1620              		.align	1
 1621              		.global	HAL_CAN_ActivateNotification
 1622              		.syntax unified
 1623              		.thumb
 1624              		.thumb_func
 1625              		.fpu softvfp
 1627              	HAL_CAN_ActivateNotification:
 1628              	.LFB83:
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief    Interrupts management
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                        ##### Interrupts management #####
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]  This section provides functions allowing to:
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Enable interrupts.
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1629              		.loc 1 1262 0
 1630              		.cfi_startproc
 1631              		@ args = 0, pretend = 0, frame = 0
 1632              		@ frame_needed = 0, uses_anonymous_args = 0
 1633              		@ link register save eliminated.
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 64


 1634              	.LVL157:
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1635              		.loc 1 1263 0
 1636 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1637              	.LVL158:
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1638              		.loc 1 1268 0
 1639 0004 013B     		subs	r3, r3, #1
 1640              	.LVL159:
 1641 0006 DBB2     		uxtb	r3, r3
 1642 0008 012B     		cmp	r3, #1
 1643 000a 05D9     		bls	.L152
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Enable the selected interrupts */
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1644              		.loc 1 1280 0
 1645 000c 436A     		ldr	r3, [r0, #36]
 1646 000e 43F48023 		orr	r3, r3, #262144
 1647 0012 4362     		str	r3, [r0, #36]
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1648              		.loc 1 1282 0
 1649 0014 0120     		movs	r0, #1
 1650              	.LVL160:
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1651              		.loc 1 1284 0
 1652 0016 7047     		bx	lr
 1653              	.LVL161:
 1654              	.L152:
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1655              		.loc 1 1272 0
 1656 0018 0268     		ldr	r2, [r0]
 1657 001a 5369     		ldr	r3, [r2, #20]
 1658 001c 1943     		orrs	r1, r1, r3
 1659              	.LVL162:
 1660 001e 5161     		str	r1, [r2, #20]
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1661              		.loc 1 1275 0
 1662 0020 0020     		movs	r0, #0
 1663              	.LVL163:
 1664 0022 7047     		bx	lr
 1665              		.cfi_endproc
 1666              	.LFE83:
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 65


 1668              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 1669              		.align	1
 1670              		.global	HAL_CAN_DeactivateNotification
 1671              		.syntax unified
 1672              		.thumb
 1673              		.thumb_func
 1674              		.fpu softvfp
 1676              	HAL_CAN_DeactivateNotification:
 1677              	.LFB84:
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Disable interrupts.
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1678              		.loc 1 1295 0
 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 0
 1681              		@ frame_needed = 0, uses_anonymous_args = 0
 1682              		@ link register save eliminated.
 1683              	.LVL164:
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1684              		.loc 1 1296 0
 1685 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1686              	.LVL165:
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Check function parameters */
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1687              		.loc 1 1301 0
 1688 0004 013B     		subs	r3, r3, #1
 1689              	.LVL166:
 1690 0006 DBB2     		uxtb	r3, r3
 1691 0008 012B     		cmp	r3, #1
 1692 000a 05D9     		bls	.L156
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Disable the selected interrupts */
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Return function status */
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_OK;
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1693              		.loc 1 1313 0
 1694 000c 436A     		ldr	r3, [r0, #36]
 1695 000e 43F48023 		orr	r3, r3, #262144
 1696 0012 4362     		str	r3, [r0, #36]
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 66


1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     return HAL_ERROR;
 1697              		.loc 1 1315 0
 1698 0014 0120     		movs	r0, #1
 1699              	.LVL167:
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1700              		.loc 1 1317 0
 1701 0016 7047     		bx	lr
 1702              	.LVL168:
 1703              	.L156:
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 1704              		.loc 1 1305 0
 1705 0018 0268     		ldr	r2, [r0]
 1706 001a 5369     		ldr	r3, [r2, #20]
 1707 001c 23EA0101 		bic	r1, r3, r1
 1708              	.LVL169:
 1709 0020 5161     		str	r1, [r2, #20]
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 1710              		.loc 1 1308 0
 1711 0022 0020     		movs	r0, #0
 1712              	.LVL170:
 1713 0024 7047     		bx	lr
 1714              		.cfi_endproc
 1715              	.LFE84:
 1717              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 1718              		.align	1
 1719              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 1720              		.syntax unified
 1721              		.thumb
 1722              		.thumb_func
 1723              		.fpu softvfp
 1725              	HAL_CAN_TxMailbox0CompleteCallback:
 1726              	.LFB86:
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != 0U)
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 67


1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != 0U)
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != 0U)
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != 0U)
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != 0U)
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != 0U)
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != 0U)
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != 0U)
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 68


1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != 0U)
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != 0U)
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Call weak (surcharged) callback */
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       else
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != 0U)
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != 0U)
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Update error code */
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         else
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           /* Call weak (surcharged) callback */
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 69


1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check if message is still pending */
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check if message is still pending */
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 70


1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != 0U)
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep Callback */
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != 0U)
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != 0U)
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Clear WakeUp Flag */
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* WakeUp Callback */
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Call weak (surcharged) callback */
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Error interrupts management *********************************************/
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != 0U)
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != 0U)
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Error Warning Flag */
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Error Passive Flag */
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 71


1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Bus-off Flag */
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Check Last Error Code Flag */
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_0):
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Stuff error */
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1):
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Form error */
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2):
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             /* Set CAN error code to CRC error */
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           default:
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         /* Clear Last error code Flag */
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Clear ERRI Flag */
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code in handle */
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 72


1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call Error callback function */
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Call weak (surcharged) callback */
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief   CAN Callback functions
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****                           ##### Callback functions #####
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     This subsection provides the following callback functions:
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1727              		.loc 1 1672 0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 0
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
 1731              		@ link register save eliminated.
 1732              	.LVL171:
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 73


1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1733              		.loc 1 1680 0
 1734 0000 7047     		bx	lr
 1735              		.cfi_endproc
 1736              	.LFE86:
 1738              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 1739              		.align	1
 1740              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 1741              		.syntax unified
 1742              		.thumb
 1743              		.thumb_func
 1744              		.fpu softvfp
 1746              	HAL_CAN_TxMailbox1CompleteCallback:
 1747              	.LFB87:
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1748              		.loc 1 1689 0
 1749              		.cfi_startproc
 1750              		@ args = 0, pretend = 0, frame = 0
 1751              		@ frame_needed = 0, uses_anonymous_args = 0
 1752              		@ link register save eliminated.
 1753              	.LVL172:
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1754              		.loc 1 1697 0
 1755 0000 7047     		bx	lr
 1756              		.cfi_endproc
 1757              	.LFE87:
 1759              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 1760              		.align	1
 1761              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 1762              		.syntax unified
 1763              		.thumb
 1764              		.thumb_func
 1765              		.fpu softvfp
 1767              	HAL_CAN_TxMailbox2CompleteCallback:
 1768              	.LFB88:
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 74


1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1769              		.loc 1 1706 0
 1770              		.cfi_startproc
 1771              		@ args = 0, pretend = 0, frame = 0
 1772              		@ frame_needed = 0, uses_anonymous_args = 0
 1773              		@ link register save eliminated.
 1774              	.LVL173:
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1775              		.loc 1 1714 0
 1776 0000 7047     		bx	lr
 1777              		.cfi_endproc
 1778              	.LFE88:
 1780              		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 1781              		.align	1
 1782              		.weak	HAL_CAN_TxMailbox0AbortCallback
 1783              		.syntax unified
 1784              		.thumb
 1785              		.thumb_func
 1786              		.fpu softvfp
 1788              	HAL_CAN_TxMailbox0AbortCallback:
 1789              	.LFB89:
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1790              		.loc 1 1723 0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 0
 1793              		@ frame_needed = 0, uses_anonymous_args = 0
 1794              		@ link register save eliminated.
 1795              	.LVL174:
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1796              		.loc 1 1731 0
 1797 0000 7047     		bx	lr
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 75


 1798              		.cfi_endproc
 1799              	.LFE89:
 1801              		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 1802              		.align	1
 1803              		.weak	HAL_CAN_TxMailbox1AbortCallback
 1804              		.syntax unified
 1805              		.thumb
 1806              		.thumb_func
 1807              		.fpu softvfp
 1809              	HAL_CAN_TxMailbox1AbortCallback:
 1810              	.LFB90:
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1811              		.loc 1 1740 0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 0
 1814              		@ frame_needed = 0, uses_anonymous_args = 0
 1815              		@ link register save eliminated.
 1816              	.LVL175:
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1817              		.loc 1 1748 0
 1818 0000 7047     		bx	lr
 1819              		.cfi_endproc
 1820              	.LFE90:
 1822              		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 1823              		.align	1
 1824              		.weak	HAL_CAN_TxMailbox2AbortCallback
 1825              		.syntax unified
 1826              		.thumb
 1827              		.thumb_func
 1828              		.fpu softvfp
 1830              	HAL_CAN_TxMailbox2AbortCallback:
 1831              	.LFB91:
1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1832              		.loc 1 1757 0
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 76


 1833              		.cfi_startproc
 1834              		@ args = 0, pretend = 0, frame = 0
 1835              		@ frame_needed = 0, uses_anonymous_args = 0
 1836              		@ link register save eliminated.
 1837              	.LVL176:
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1838              		.loc 1 1765 0
 1839 0000 7047     		bx	lr
 1840              		.cfi_endproc
 1841              	.LFE91:
 1843              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1844              		.align	1
 1845              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 1846              		.syntax unified
 1847              		.thumb
 1848              		.thumb_func
 1849              		.fpu softvfp
 1851              	HAL_CAN_RxFifo0MsgPendingCallback:
 1852              	.LFB92:
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1853              		.loc 1 1774 0
 1854              		.cfi_startproc
 1855              		@ args = 0, pretend = 0, frame = 0
 1856              		@ frame_needed = 0, uses_anonymous_args = 0
 1857              		@ link register save eliminated.
 1858              	.LVL177:
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1859              		.loc 1 1782 0
 1860 0000 7047     		bx	lr
 1861              		.cfi_endproc
 1862              	.LFE92:
 1864              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 1865              		.align	1
 1866              		.weak	HAL_CAN_RxFifo0FullCallback
 1867              		.syntax unified
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 77


 1868              		.thumb
 1869              		.thumb_func
 1870              		.fpu softvfp
 1872              	HAL_CAN_RxFifo0FullCallback:
 1873              	.LFB93:
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1874              		.loc 1 1791 0
 1875              		.cfi_startproc
 1876              		@ args = 0, pretend = 0, frame = 0
 1877              		@ frame_needed = 0, uses_anonymous_args = 0
 1878              		@ link register save eliminated.
 1879              	.LVL178:
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             file
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1880              		.loc 1 1799 0
 1881 0000 7047     		bx	lr
 1882              		.cfi_endproc
 1883              	.LFE93:
 1885              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 1886              		.align	1
 1887              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 1888              		.syntax unified
 1889              		.thumb
 1890              		.thumb_func
 1891              		.fpu softvfp
 1893              	HAL_CAN_RxFifo1MsgPendingCallback:
 1894              	.LFB94:
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1895              		.loc 1 1808 0
 1896              		.cfi_startproc
 1897              		@ args = 0, pretend = 0, frame = 0
 1898              		@ frame_needed = 0, uses_anonymous_args = 0
 1899              		@ link register save eliminated.
 1900              	.LVL179:
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 78


1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1901              		.loc 1 1816 0
 1902 0000 7047     		bx	lr
 1903              		.cfi_endproc
 1904              	.LFE94:
 1906              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 1907              		.align	1
 1908              		.weak	HAL_CAN_RxFifo1FullCallback
 1909              		.syntax unified
 1910              		.thumb
 1911              		.thumb_func
 1912              		.fpu softvfp
 1914              	HAL_CAN_RxFifo1FullCallback:
 1915              	.LFB95:
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1916              		.loc 1 1825 0
 1917              		.cfi_startproc
 1918              		@ args = 0, pretend = 0, frame = 0
 1919              		@ frame_needed = 0, uses_anonymous_args = 0
 1920              		@ link register save eliminated.
 1921              	.LVL180:
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             file
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1922              		.loc 1 1833 0
 1923 0000 7047     		bx	lr
 1924              		.cfi_endproc
 1925              	.LFE95:
 1927              		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 1928              		.align	1
 1929              		.weak	HAL_CAN_SleepCallback
 1930              		.syntax unified
 1931              		.thumb
 1932              		.thumb_func
 1933              		.fpu softvfp
 1935              	HAL_CAN_SleepCallback:
 1936              	.LFB96:
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 79


1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Sleep callback.
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1937              		.loc 1 1842 0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 0
 1940              		@ frame_needed = 0, uses_anonymous_args = 0
 1941              		@ link register save eliminated.
 1942              	.LVL181:
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1943              		.loc 1 1849 0
 1944 0000 7047     		bx	lr
 1945              		.cfi_endproc
 1946              	.LFE96:
 1948              		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 1949              		.align	1
 1950              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 1951              		.syntax unified
 1952              		.thumb
 1953              		.thumb_func
 1954              		.fpu softvfp
 1956              	HAL_CAN_WakeUpFromRxMsgCallback:
 1957              	.LFB97:
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1958              		.loc 1 1858 0
 1959              		.cfi_startproc
 1960              		@ args = 0, pretend = 0, frame = 0
 1961              		@ frame_needed = 0, uses_anonymous_args = 0
 1962              		@ link register save eliminated.
 1963              	.LVL182:
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             user file
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 80


 1964              		.loc 1 1866 0
 1965 0000 7047     		bx	lr
 1966              		.cfi_endproc
 1967              	.LFE97:
 1969              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1970              		.align	1
 1971              		.weak	HAL_CAN_ErrorCallback
 1972              		.syntax unified
 1973              		.thumb
 1974              		.thumb_func
 1975              		.fpu softvfp
 1977              	HAL_CAN_ErrorCallback:
 1978              	.LFB98:
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Error CAN callback.
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval None
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 1979              		.loc 1 1875 0
 1980              		.cfi_startproc
 1981              		@ args = 0, pretend = 0, frame = 0
 1982              		@ frame_needed = 0, uses_anonymous_args = 0
 1983              		@ link register save eliminated.
 1984              	.LVL183:
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   UNUSED(hcan);
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****    */
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 1985              		.loc 1 1882 0
 1986 0000 7047     		bx	lr
 1987              		.cfi_endproc
 1988              	.LFE98:
 1990              		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 1991              		.align	1
 1992              		.global	HAL_CAN_IRQHandler
 1993              		.syntax unified
 1994              		.thumb
 1995              		.thumb_func
 1996              		.fpu softvfp
 1998              	HAL_CAN_IRQHandler:
 1999              	.LFB85:
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2000              		.loc 1 1326 0
 2001              		.cfi_startproc
 2002              		@ args = 0, pretend = 0, frame = 0
 2003              		@ frame_needed = 0, uses_anonymous_args = 0
 2004              	.LVL184:
 2005 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2006              	.LCFI18:
 2007              		.cfi_def_cfa_offset 40
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 81


 2008              		.cfi_offset 3, -40
 2009              		.cfi_offset 4, -36
 2010              		.cfi_offset 5, -32
 2011              		.cfi_offset 6, -28
 2012              		.cfi_offset 7, -24
 2013              		.cfi_offset 8, -20
 2014              		.cfi_offset 9, -16
 2015              		.cfi_offset 10, -12
 2016              		.cfi_offset 11, -8
 2017              		.cfi_offset 14, -4
 2018 0004 0546     		mov	r5, r0
 2019              	.LVL185:
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2020              		.loc 1 1328 0
 2021 0006 0368     		ldr	r3, [r0]
 2022 0008 5C69     		ldr	r4, [r3, #20]
 2023              	.LVL186:
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2024              		.loc 1 1329 0
 2025 000a 5F68     		ldr	r7, [r3, #4]
 2026              	.LVL187:
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2027              		.loc 1 1330 0
 2028 000c 9E68     		ldr	r6, [r3, #8]
 2029              	.LVL188:
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2030              		.loc 1 1331 0
 2031 000e D3F80C90 		ldr	r9, [r3, #12]
 2032              	.LVL189:
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2033              		.loc 1 1332 0
 2034 0012 D3F81080 		ldr	r8, [r3, #16]
 2035              	.LVL190:
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2036              		.loc 1 1333 0
 2037 0016 D3F818A0 		ldr	r10, [r3, #24]
 2038              	.LVL191:
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2039              		.loc 1 1336 0
 2040 001a 14F0010F 		tst	r4, #1
 2041 001e 5AD0     		beq	.L203
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2042              		.loc 1 1339 0
 2043 0020 16F0010F 		tst	r6, #1
 2044 0024 17D0     		beq	.L204
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2045              		.loc 1 1342 0
 2046 0026 0122     		movs	r2, #1
 2047 0028 9A60     		str	r2, [r3, #8]
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2048              		.loc 1 1344 0
 2049 002a 16F0020F 		tst	r6, #2
 2050 002e 08D1     		bne	.L208
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2051              		.loc 1 1352 0
 2052 0030 16F0040F 		tst	r6, #4
 2053 0034 30D1     		bne	.L205
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 82


1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2054              		.loc 1 1357 0
 2055 0036 16F0080F 		tst	r6, #8
 2056 003a 07D0     		beq	.L209
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2057              		.loc 1 1360 0
 2058 003c 4FF4805B 		mov	fp, #4096
 2059 0040 0BE0     		b	.L172
 2060              	.L208:
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 2061              		.loc 1 1348 0
 2062 0042 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2063              	.LVL192:
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2064              		.loc 1 1327 0
 2065 0046 4FF0000B 		mov	fp, #0
 2066 004a 06E0     		b	.L172
 2067              	.LVL193:
 2068              	.L209:
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2069              		.loc 1 1366 0
 2070 004c FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2071              	.LVL194:
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2072              		.loc 1 1327 0
 2073 0050 4FF0000B 		mov	fp, #0
 2074 0054 01E0     		b	.L172
 2075              	.LVL195:
 2076              	.L204:
 2077 0056 4FF0000B 		mov	fp, #0
 2078              	.LVL196:
 2079              	.L172:
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2080              		.loc 1 1372 0
 2081 005a 16F4807F 		tst	r6, #256
 2082 005e 0BD0     		beq	.L174
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2083              		.loc 1 1375 0
 2084 0060 2B68     		ldr	r3, [r5]
 2085 0062 4FF48072 		mov	r2, #256
 2086 0066 9A60     		str	r2, [r3, #8]
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2087              		.loc 1 1377 0
 2088 0068 16F4007F 		tst	r6, #512
 2089 006c 17D1     		bne	.L210
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2090              		.loc 1 1385 0
 2091 006e 16F4806F 		tst	r6, #1024
 2092 0072 18D0     		beq	.L176
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2093              		.loc 1 1388 0
 2094 0074 4BF4005B 		orr	fp, fp, #8192
 2095              	.LVL197:
 2096              	.L174:
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2097              		.loc 1 1405 0
 2098 0078 16F4803F 		tst	r6, #65536
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 83


 2099 007c 2DD0     		beq	.L171
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2100              		.loc 1 1408 0
 2101 007e 2B68     		ldr	r3, [r5]
 2102 0080 4FF48032 		mov	r2, #65536
 2103 0084 9A60     		str	r2, [r3, #8]
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       {
 2104              		.loc 1 1410 0
 2105 0086 16F4003F 		tst	r6, #131072
 2106 008a 16D1     		bne	.L211
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2107              		.loc 1 1418 0
 2108 008c 16F4802F 		tst	r6, #262144
 2109 0090 17D0     		beq	.L179
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2110              		.loc 1 1421 0
 2111 0092 4BF4004B 		orr	fp, fp, #32768
 2112              	.LVL198:
 2113 0096 20E0     		b	.L171
 2114              	.LVL199:
 2115              	.L205:
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2116              		.loc 1 1355 0
 2117 0098 4FF4006B 		mov	fp, #2048
 2118 009c DDE7     		b	.L172
 2119              	.LVL200:
 2120              	.L210:
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 2121              		.loc 1 1381 0
 2122 009e 2846     		mov	r0, r5
 2123 00a0 FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2124              	.LVL201:
 2125 00a4 E8E7     		b	.L174
 2126              	.L176:
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2127              		.loc 1 1390 0
 2128 00a6 16F4006F 		tst	r6, #2048
 2129 00aa 02D0     		beq	.L177
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2130              		.loc 1 1393 0
 2131 00ac 4BF4804B 		orr	fp, fp, #16384
 2132              	.LVL202:
 2133 00b0 E2E7     		b	.L174
 2134              	.L177:
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2135              		.loc 1 1399 0
 2136 00b2 2846     		mov	r0, r5
 2137 00b4 FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2138              	.LVL203:
 2139 00b8 DEE7     		b	.L174
 2140              	.L211:
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 2141              		.loc 1 1414 0
 2142 00ba 2846     		mov	r0, r5
 2143 00bc FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2144              	.LVL204:
 2145 00c0 0BE0     		b	.L171
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 84


 2146              	.L179:
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2147              		.loc 1 1423 0
 2148 00c2 16F4002F 		tst	r6, #524288
 2149 00c6 02D0     		beq	.L180
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2150              		.loc 1 1426 0
 2151 00c8 4BF4803B 		orr	fp, fp, #65536
 2152              	.LVL205:
 2153 00cc 05E0     		b	.L171
 2154              	.L180:
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         }
 2155              		.loc 1 1432 0
 2156 00ce 2846     		mov	r0, r5
 2157 00d0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2158              	.LVL206:
 2159 00d4 01E0     		b	.L171
 2160              	.LVL207:
 2161              	.L203:
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2162              		.loc 1 1327 0
 2163 00d6 4FF0000B 		mov	fp, #0
 2164              	.LVL208:
 2165              	.L171:
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2166              		.loc 1 1439 0
 2167 00da 14F0080F 		tst	r4, #8
 2168 00de 07D0     		beq	.L181
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2169              		.loc 1 1441 0
 2170 00e0 19F0100F 		tst	r9, #16
 2171 00e4 04D0     		beq	.L181
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2172              		.loc 1 1444 0
 2173 00e6 4BF4007B 		orr	fp, fp, #512
 2174              	.LVL209:
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2175              		.loc 1 1447 0
 2176 00ea 2B68     		ldr	r3, [r5]
 2177 00ec 1022     		movs	r2, #16
 2178 00ee DA60     		str	r2, [r3, #12]
 2179              	.L181:
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2180              		.loc 1 1452 0
 2181 00f0 14F0040F 		tst	r4, #4
 2182 00f4 02D0     		beq	.L182
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2183              		.loc 1 1454 0
 2184 00f6 19F0080F 		tst	r9, #8
 2185 00fa 60D1     		bne	.L212
 2186              	.L182:
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2187              		.loc 1 1466 0
 2188 00fc 14F0020F 		tst	r4, #2
 2189 0100 04D0     		beq	.L183
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2190              		.loc 1 1469 0
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 85


 2191 0102 2B68     		ldr	r3, [r5]
 2192 0104 DB68     		ldr	r3, [r3, #12]
 2193 0106 13F0030F 		tst	r3, #3
 2194 010a 5FD1     		bne	.L213
 2195              	.L183:
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2196              		.loc 1 1478 0
 2197 010c 14F0400F 		tst	r4, #64
 2198 0110 07D0     		beq	.L184
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2199              		.loc 1 1480 0
 2200 0112 18F0100F 		tst	r8, #16
 2201 0116 04D0     		beq	.L184
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2202              		.loc 1 1483 0
 2203 0118 4BF4806B 		orr	fp, fp, #1024
 2204              	.LVL210:
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2205              		.loc 1 1486 0
 2206 011c 2B68     		ldr	r3, [r5]
 2207 011e 1022     		movs	r2, #16
 2208 0120 1A61     		str	r2, [r3, #16]
 2209              	.L184:
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2210              		.loc 1 1491 0
 2211 0122 14F0200F 		tst	r4, #32
 2212 0126 02D0     		beq	.L185
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2213              		.loc 1 1493 0
 2214 0128 18F0080F 		tst	r8, #8
 2215 012c 52D1     		bne	.L214
 2216              	.L185:
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2217              		.loc 1 1505 0
 2218 012e 14F0100F 		tst	r4, #16
 2219 0132 04D0     		beq	.L186
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2220              		.loc 1 1508 0
 2221 0134 2B68     		ldr	r3, [r5]
 2222 0136 1B69     		ldr	r3, [r3, #16]
 2223 0138 13F0030F 		tst	r3, #3
 2224 013c 51D1     		bne	.L215
 2225              	.L186:
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2226              		.loc 1 1517 0
 2227 013e 14F4003F 		tst	r4, #131072
 2228 0142 02D0     		beq	.L187
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2229              		.loc 1 1519 0
 2230 0144 17F0100F 		tst	r7, #16
 2231 0148 4FD1     		bne	.L216
 2232              	.L187:
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2233              		.loc 1 1531 0
 2234 014a 14F4803F 		tst	r4, #65536
 2235 014e 02D0     		beq	.L188
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 86


 2236              		.loc 1 1533 0
 2237 0150 17F0080F 		tst	r7, #8
 2238 0154 50D1     		bne	.L217
 2239              	.L188:
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2240              		.loc 1 1545 0
 2241 0156 14F4004F 		tst	r4, #32768
 2242 015a 67D0     		beq	.L189
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2243              		.loc 1 1547 0
 2244 015c 17F0040F 		tst	r7, #4
 2245 0160 61D0     		beq	.L190
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2246              		.loc 1 1550 0
 2247 0162 14F4807F 		tst	r4, #256
 2248 0166 04D0     		beq	.L191
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2249              		.loc 1 1550 0 is_stmt 0 discriminator 1
 2250 0168 1AF0010F 		tst	r10, #1
 2251 016c 01D0     		beq	.L191
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2252              		.loc 1 1554 0 is_stmt 1
 2253 016e 4BF0010B 		orr	fp, fp, #1
 2254              	.LVL211:
 2255              	.L191:
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2256              		.loc 1 1560 0
 2257 0172 14F4007F 		tst	r4, #512
 2258 0176 04D0     		beq	.L192
1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2259              		.loc 1 1560 0 is_stmt 0 discriminator 1
 2260 0178 1AF0020F 		tst	r10, #2
 2261 017c 01D0     		beq	.L192
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2262              		.loc 1 1564 0 is_stmt 1
 2263 017e 4BF0020B 		orr	fp, fp, #2
 2264              	.LVL212:
 2265              	.L192:
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2266              		.loc 1 1570 0
 2267 0182 14F4806F 		tst	r4, #1024
 2268 0186 04D0     		beq	.L193
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2269              		.loc 1 1570 0 is_stmt 0 discriminator 1
 2270 0188 1AF0040F 		tst	r10, #4
 2271 018c 01D0     		beq	.L193
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2272              		.loc 1 1574 0 is_stmt 1
 2273 018e 4BF0040B 		orr	fp, fp, #4
 2274              	.LVL213:
 2275              	.L193:
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2276              		.loc 1 1580 0
 2277 0192 14F4006F 		tst	r4, #2048
 2278 0196 46D0     		beq	.L190
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2279              		.loc 1 1580 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 87


 2280 0198 1AF0700A 		ands	r10, r10, #112
 2281              	.LVL214:
 2282 019c 43D0     		beq	.L190
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2283              		.loc 1 1583 0 is_stmt 1
 2284 019e BAF1300F 		cmp	r10, #48
 2285 01a2 48D0     		beq	.L195
 2286 01a4 2FD9     		bls	.L218
 2287 01a6 BAF1500F 		cmp	r10, #80
 2288 01aa 47D0     		beq	.L199
 2289 01ac BAF1600F 		cmp	r10, #96
 2290 01b0 47D0     		beq	.L200
 2291 01b2 BAF1400F 		cmp	r10, #64
 2292 01b6 31D1     		bne	.L194
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2293              		.loc 1 1599 0
 2294 01b8 4BF0400B 		orr	fp, fp, #64
 2295              	.LVL215:
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2296              		.loc 1 1600 0
 2297 01bc 2EE0     		b	.L194
 2298              	.LVL216:
 2299              	.L212:
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2300              		.loc 1 1457 0
 2301 01be 2B68     		ldr	r3, [r5]
 2302 01c0 0822     		movs	r2, #8
 2303 01c2 DA60     		str	r2, [r3, #12]
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2304              		.loc 1 1461 0
 2305 01c4 2846     		mov	r0, r5
 2306 01c6 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2307              	.LVL217:
 2308 01ca 97E7     		b	.L182
 2309              	.L213:
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2310              		.loc 1 1473 0
 2311 01cc 2846     		mov	r0, r5
 2312 01ce FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2313              	.LVL218:
 2314 01d2 9BE7     		b	.L183
 2315              	.L214:
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2316              		.loc 1 1496 0
 2317 01d4 2B68     		ldr	r3, [r5]
 2318 01d6 0822     		movs	r2, #8
 2319 01d8 1A61     		str	r2, [r3, #16]
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2320              		.loc 1 1500 0
 2321 01da 2846     		mov	r0, r5
 2322 01dc FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2323              	.LVL219:
 2324 01e0 A5E7     		b	.L185
 2325              	.L215:
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2326              		.loc 1 1512 0
 2327 01e2 2846     		mov	r0, r5
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 88


 2328 01e4 FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2329              	.LVL220:
 2330 01e8 A9E7     		b	.L186
 2331              	.L216:
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2332              		.loc 1 1522 0
 2333 01ea 2B68     		ldr	r3, [r5]
 2334 01ec 1022     		movs	r2, #16
 2335 01ee 5A60     		str	r2, [r3, #4]
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2336              		.loc 1 1526 0
 2337 01f0 2846     		mov	r0, r5
 2338 01f2 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2339              	.LVL221:
 2340 01f6 A8E7     		b	.L187
 2341              	.L217:
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2342              		.loc 1 1536 0
 2343 01f8 2B68     		ldr	r3, [r5]
 2344 01fa 0822     		movs	r2, #8
 2345 01fc 5A60     		str	r2, [r3, #4]
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2346              		.loc 1 1540 0
 2347 01fe 2846     		mov	r0, r5
 2348 0200 FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2349              	.LVL222:
 2350 0204 A7E7     		b	.L188
 2351              	.LVL223:
 2352              	.L218:
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****         {
 2353              		.loc 1 1583 0
 2354 0206 BAF1100F 		cmp	r10, #16
 2355 020a 05D0     		beq	.L197
 2356 020c BAF1200F 		cmp	r10, #32
 2357 0210 04D1     		bne	.L194
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2358              		.loc 1 1591 0
 2359 0212 4BF0100B 		orr	fp, fp, #16
 2360              	.LVL224:
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2361              		.loc 1 1592 0
 2362 0216 01E0     		b	.L194
 2363              	.L197:
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2364              		.loc 1 1587 0
 2365 0218 4BF0080B 		orr	fp, fp, #8
 2366              	.LVL225:
 2367              	.L194:
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       }
 2368              		.loc 1 1614 0
 2369 021c 2A68     		ldr	r2, [r5]
 2370 021e 9369     		ldr	r3, [r2, #24]
 2371 0220 23F07003 		bic	r3, r3, #112
 2372 0224 9361     		str	r3, [r2, #24]
 2373              	.L190:
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2374              		.loc 1 1619 0
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 89


 2375 0226 2B68     		ldr	r3, [r5]
 2376 0228 0422     		movs	r2, #4
 2377 022a 5A60     		str	r2, [r3, #4]
 2378              	.L189:
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
 2379              		.loc 1 1623 0
 2380 022c BBF1000F 		cmp	fp, #0
 2381 0230 0AD1     		bne	.L219
 2382              	.L170:
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2383              		.loc 1 1632 0
 2384 0232 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2385              	.LVL226:
 2386              	.L195:
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2387              		.loc 1 1595 0
 2388 0236 4BF0200B 		orr	fp, fp, #32
 2389              	.LVL227:
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2390              		.loc 1 1596 0
 2391 023a EFE7     		b	.L194
 2392              	.L199:
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2393              		.loc 1 1603 0
 2394 023c 4BF0800B 		orr	fp, fp, #128
 2395              	.LVL228:
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2396              		.loc 1 1604 0
 2397 0240 ECE7     		b	.L194
 2398              	.L200:
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             break;
 2399              		.loc 1 1607 0
 2400 0242 4BF4807B 		orr	fp, fp, #256
 2401              	.LVL229:
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****           default:
 2402              		.loc 1 1608 0
 2403 0246 E9E7     		b	.L194
 2404              	.L219:
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2405              		.loc 1 1626 0
 2406 0248 6B6A     		ldr	r3, [r5, #36]
 2407 024a 43EA0B03 		orr	r3, r3, fp
 2408 024e 6B62     		str	r3, [r5, #36]
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2409              		.loc 1 1630 0
 2410 0250 2846     		mov	r0, r5
 2411 0252 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2412              	.LVL230:
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
 2413              		.loc 1 1632 0
 2414 0256 ECE7     		b	.L170
 2415              		.cfi_endproc
 2416              	.LFE85:
 2418              		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2419              		.align	1
 2420              		.global	HAL_CAN_GetState
 2421              		.syntax unified
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 90


 2422              		.thumb
 2423              		.thumb_func
 2424              		.fpu softvfp
 2426              	HAL_CAN_GetState:
 2427              	.LFB99:
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @}
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****  *
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @verbatim
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****             ##### Peripheral State and Error functions #####
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   ==============================================================================
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     [..]
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     This subsection provides functions allowing to :
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** @endverbatim
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @{
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return the CAN state.
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL state
1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2428              		.loc 1 1912 0
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 0
 2431              		@ frame_needed = 0, uses_anonymous_args = 0
 2432              		@ link register save eliminated.
 2433              	.LVL231:
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2434              		.loc 1 1913 0
 2435 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2436 0004 DBB2     		uxtb	r3, r3
 2437              	.LVL232:
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2438              		.loc 1 1915 0
 2439 0006 5A1E     		subs	r2, r3, #1
 2440 0008 D2B2     		uxtb	r2, r2
 2441 000a 012A     		cmp	r2, #1
 2442 000c 01D9     		bls	.L224
 2443              	.LVL233:
 2444              	.L221:
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 91


1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep mode is active */
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Check sleep mode request flag */
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Sleep mode request is pending */
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     else
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       /* Neither sleep mode request nor sleep mode acknowledge */
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return CAN state */
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return state;
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2445              		.loc 1 1938 0
 2446 000e 1846     		mov	r0, r3
 2447              	.LVL234:
 2448 0010 7047     		bx	lr
 2449              	.LVL235:
 2450              	.L224:
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2451              		.loc 1 1919 0
 2452 0012 0268     		ldr	r2, [r0]
 2453 0014 5168     		ldr	r1, [r2, #4]
 2454 0016 11F0020F 		tst	r1, #2
 2455 001a 05D1     		bne	.L222
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     {
 2456              		.loc 1 1925 0
 2457 001c 1268     		ldr	r2, [r2]
 2458 001e 12F0020F 		tst	r2, #2
 2459 0022 F4D0     		beq	.L221
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2460              		.loc 1 1928 0
 2461 0024 0323     		movs	r3, #3
 2462              	.LVL236:
 2463 0026 F2E7     		b	.L221
 2464              	.LVL237:
 2465              	.L222:
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     }
 2466              		.loc 1 1922 0
 2467 0028 0423     		movs	r3, #4
 2468              	.LVL238:
 2469 002a F0E7     		b	.L221
 2470              		.cfi_endproc
 2471              	.LFE99:
 2473              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2474              		.align	1
 2475              		.global	HAL_CAN_GetError
 2476              		.syntax unified
 2477              		.thumb
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 92


 2478              		.thumb_func
 2479              		.fpu softvfp
 2481              	HAL_CAN_GetError:
 2482              	.LFB100:
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Return the CAN error code.
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval CAN Error Code
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2483              		.loc 1 1947 0
 2484              		.cfi_startproc
 2485              		@ args = 0, pretend = 0, frame = 0
 2486              		@ frame_needed = 0, uses_anonymous_args = 0
 2487              		@ link register save eliminated.
 2488              	.LVL239:
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return CAN error code */
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return hcan->ErrorCode;
 2489              		.loc 1 1949 0
 2490 0000 406A     		ldr	r0, [r0, #36]
 2491              	.LVL240:
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2492              		.loc 1 1950 0
 2493 0002 7047     		bx	lr
 2494              		.cfi_endproc
 2495              	.LFE100:
 2497              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 2498              		.align	1
 2499              		.global	HAL_CAN_ResetError
 2500              		.syntax unified
 2501              		.thumb
 2502              		.thumb_func
 2503              		.fpu softvfp
 2505              	HAL_CAN_ResetError:
 2506              	.LFB101:
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** /**
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @brief  Reset the CAN error code.
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   *         the configuration information for the specified CAN.
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   * @retval HAL status
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   */
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** {
 2507              		.loc 1 1959 0
 2508              		.cfi_startproc
 2509              		@ args = 0, pretend = 0, frame = 0
 2510              		@ frame_needed = 0, uses_anonymous_args = 0
 2511              		@ link register save eliminated.
 2512              	.LVL241:
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2513              		.loc 1 1961 0
 2514 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 93


 2515              	.LVL242:
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2516              		.loc 1 1963 0
 2517 0004 013B     		subs	r3, r3, #1
 2518              	.LVL243:
 2519 0006 DBB2     		uxtb	r3, r3
 2520 0008 012B     		cmp	r3, #1
 2521 000a 05D9     		bls	.L229
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Reset CAN error code */
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode = 0U;
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   else
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   {
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     /* Update error code */
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2522              		.loc 1 1972 0
 2523 000c 436A     		ldr	r3, [r0, #36]
 2524 000e 43F48023 		orr	r3, r3, #262144
 2525 0012 4362     		str	r3, [r0, #36]
 2526              	.LVL244:
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****     status = HAL_ERROR;
 2527              		.loc 1 1974 0
 2528 0014 0120     		movs	r0, #1
 2529              	.LVL245:
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** 
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   /* Return the status */
1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   return status;
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c **** }
 2530              		.loc 1 1979 0
 2531 0016 7047     		bx	lr
 2532              	.LVL246:
 2533              	.L229:
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   }
 2534              		.loc 1 1967 0
 2535 0018 0023     		movs	r3, #0
 2536 001a 4362     		str	r3, [r0, #36]
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2537              		.loc 1 1960 0
 2538 001c 1846     		mov	r0, r3
 2539              	.LVL247:
 2540 001e 7047     		bx	lr
 2541              		.cfi_endproc
 2542              	.LFE101:
 2544              		.text
 2545              	.Letext0:
 2546              		.file 3 "c:\\program files (x86)\\embedded toolchain\\gnu tools arm embedded\\7 2017-q4-major\\arm
 2547              		.file 4 "c:\\program files (x86)\\embedded toolchain\\gnu tools arm embedded\\7 2017-q4-major\\arm
 2548              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 2549              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2550              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2551              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2552              		.file 9 "c:\\program files (x86)\\embedded toolchain\\gnu tools arm embedded\\7 2017-q4-major\\arm
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 94


 2553              		.file 10 "c:\\program files (x86)\\embedded toolchain\\gnu tools arm embedded\\7 2017-q4-major\\ar
 2554              		.file 11 "c:\\program files (x86)\\embedded toolchain\\gnu tools arm embedded\\7 2017-q4-major\\li
 2555              		.file 12 "c:\\program files (x86)\\embedded toolchain\\gnu tools arm embedded\\7 2017-q4-major\\ar
 2556              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2557              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 2558              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 95


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_hal_can.c
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:16     .text.HAL_CAN_MspInit:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:23     .text.HAL_CAN_MspInit:00000000 HAL_CAN_MspInit
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:38     .text.HAL_CAN_Init:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:45     .text.HAL_CAN_Init:00000000 HAL_CAN_Init
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:281    .text.HAL_CAN_MspDeInit:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:288    .text.HAL_CAN_MspDeInit:00000000 HAL_CAN_MspDeInit
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:302    .text.HAL_CAN_ConfigFilter:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:309    .text.HAL_CAN_ConfigFilter:00000000 HAL_CAN_ConfigFilter
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:494    .text.HAL_CAN_Start:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:501    .text.HAL_CAN_Start:00000000 HAL_CAN_Start
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:578    .text.HAL_CAN_Stop:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:585    .text.HAL_CAN_Stop:00000000 HAL_CAN_Stop
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:664    .text.HAL_CAN_DeInit:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:671    .text.HAL_CAN_DeInit:00000000 HAL_CAN_DeInit
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:721    .text.HAL_CAN_RequestSleep:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:728    .text.HAL_CAN_RequestSleep:00000000 HAL_CAN_RequestSleep
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:769    .text.HAL_CAN_WakeUp:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:776    .text.HAL_CAN_WakeUp:00000000 HAL_CAN_WakeUp
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:856    .text.HAL_CAN_WakeUp:00000054 $d
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:861    .text.HAL_CAN_IsSleepActive:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:868    .text.HAL_CAN_IsSleepActive:00000000 HAL_CAN_IsSleepActive
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:911    .text.HAL_CAN_AddTxMessage:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:918    .text.HAL_CAN_AddTxMessage:00000000 HAL_CAN_AddTxMessage
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1097   .text.HAL_CAN_AbortTxRequest:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1104   .text.HAL_CAN_AbortTxRequest:00000000 HAL_CAN_AbortTxRequest
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1171   .text.HAL_CAN_GetTxMailboxesFreeLevel:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1178   .text.HAL_CAN_GetTxMailboxesFreeLevel:00000000 HAL_CAN_GetTxMailboxesFreeLevel
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1238   .text.HAL_CAN_IsTxMessagePending:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1245   .text.HAL_CAN_IsTxMessagePending:00000000 HAL_CAN_IsTxMessagePending
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1290   .text.HAL_CAN_GetTxTimestamp:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1297   .text.HAL_CAN_GetTxTimestamp:00000000 HAL_CAN_GetTxTimestamp
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1352   .text.HAL_CAN_GetRxMessage:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1359   .text.HAL_CAN_GetRxMessage:00000000 HAL_CAN_GetRxMessage
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1567   .text.HAL_CAN_GetRxFifoFillLevel:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1574   .text.HAL_CAN_GetRxFifoFillLevel:00000000 HAL_CAN_GetRxFifoFillLevel
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1620   .text.HAL_CAN_ActivateNotification:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1627   .text.HAL_CAN_ActivateNotification:00000000 HAL_CAN_ActivateNotification
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1669   .text.HAL_CAN_DeactivateNotification:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1676   .text.HAL_CAN_DeactivateNotification:00000000 HAL_CAN_DeactivateNotification
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1718   .text.HAL_CAN_TxMailbox0CompleteCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1725   .text.HAL_CAN_TxMailbox0CompleteCallback:00000000 HAL_CAN_TxMailbox0CompleteCallback
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1739   .text.HAL_CAN_TxMailbox1CompleteCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1746   .text.HAL_CAN_TxMailbox1CompleteCallback:00000000 HAL_CAN_TxMailbox1CompleteCallback
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1760   .text.HAL_CAN_TxMailbox2CompleteCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1767   .text.HAL_CAN_TxMailbox2CompleteCallback:00000000 HAL_CAN_TxMailbox2CompleteCallback
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1781   .text.HAL_CAN_TxMailbox0AbortCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1788   .text.HAL_CAN_TxMailbox0AbortCallback:00000000 HAL_CAN_TxMailbox0AbortCallback
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1802   .text.HAL_CAN_TxMailbox1AbortCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1809   .text.HAL_CAN_TxMailbox1AbortCallback:00000000 HAL_CAN_TxMailbox1AbortCallback
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1823   .text.HAL_CAN_TxMailbox2AbortCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1830   .text.HAL_CAN_TxMailbox2AbortCallback:00000000 HAL_CAN_TxMailbox2AbortCallback
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1844   .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1851   .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 HAL_CAN_RxFifo0MsgPendingCallback
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1865   .text.HAL_CAN_RxFifo0FullCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1872   .text.HAL_CAN_RxFifo0FullCallback:00000000 HAL_CAN_RxFifo0FullCallback
ARM GAS  C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s 			page 96


C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1886   .text.HAL_CAN_RxFifo1MsgPendingCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1893   .text.HAL_CAN_RxFifo1MsgPendingCallback:00000000 HAL_CAN_RxFifo1MsgPendingCallback
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1907   .text.HAL_CAN_RxFifo1FullCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1914   .text.HAL_CAN_RxFifo1FullCallback:00000000 HAL_CAN_RxFifo1FullCallback
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1928   .text.HAL_CAN_SleepCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1935   .text.HAL_CAN_SleepCallback:00000000 HAL_CAN_SleepCallback
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1949   .text.HAL_CAN_WakeUpFromRxMsgCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1956   .text.HAL_CAN_WakeUpFromRxMsgCallback:00000000 HAL_CAN_WakeUpFromRxMsgCallback
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1970   .text.HAL_CAN_ErrorCallback:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1977   .text.HAL_CAN_ErrorCallback:00000000 HAL_CAN_ErrorCallback
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1991   .text.HAL_CAN_IRQHandler:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:1998   .text.HAL_CAN_IRQHandler:00000000 HAL_CAN_IRQHandler
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:2419   .text.HAL_CAN_GetState:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:2426   .text.HAL_CAN_GetState:00000000 HAL_CAN_GetState
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:2474   .text.HAL_CAN_GetError:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:2481   .text.HAL_CAN_GetError:00000000 HAL_CAN_GetError
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:2498   .text.HAL_CAN_ResetError:00000000 $t
C:\Users\Patrick\AppData\Local\Temp\ccvZn0lb.s:2505   .text.HAL_CAN_ResetError:00000000 HAL_CAN_ResetError

UNDEFINED SYMBOLS
HAL_GetTick
